<?php

// Define class namespace
namespace CarParkingSystem;

// Include database class
require_once(dirname(__FILE__) . "/AppDatabase.php");


/**
 * Application form data handler for the Car Parking System.
 *
 * This class provides access to the data within the car parking system.
 * 
 * @author Scott Sweeting <scott.sweeting@sunderland.ac.uk>
 * @copyright 2017 University of Sunderland
 * @license Proprietary
 * @version 1.2.0
 * @package CarParkingSystem
 */
class ParkingApplication {
    
    /**
     * The date in which data should be retained from.
     * 
     * @var string
     */
    protected $dataDateRetainFrom = "1st September last year";
    
    /**
     * The timestamp prior to which data is regarded as stale.
     * 
     * This is property is initialised in the class constructor.
     * 
     * @var integer
     */
    protected $dateDataStaleBefore;
    
    
    /**
     * Constructor.
     * 
     * @since 1.0.0
     */
    function __construct() {
        // Initialise settings
        
        // Determine the 'stale before' date
        $this->dateDataStaleBefore = date('Y-m-d', strtotime("{$this->dataDateRetainFrom}"));
    }
    
    
    /* 
     * *********************************************************
     * * Methods to obtain general datasets for an application *
     * *********************************************************
     */
    
    /**
     * Get the list of pre-nominal letters (titles) for the applicant name.
     * 
     * @return array Returns an array of pre-nominal letters (titles).
     * @since 1.0.0
     */
    public function getApplicantTitles() {
        $applicantTitles = array(
            'Mr.',
            'Miss',
            'Mrs',
            'Ms.',
            'Dr.',
            'Prof.',
            // 'Revd.',
            // 'Cllr.',
            // 'Sir',
            // 'Dame',
            // 'Lord',
            // 'Lady',
        );
        
        return $applicantTitles;
    }
    
    /**
     * Get a description of the attendance mode.
     * 
     * @param string $attendanceMode The attendance mode code.
     * @return string Returns a description of the attendance mode.
     * @since 1.0.0
     */
    public function getApplicantAttendanceMode($attendanceMode) {
        switch (trim($attendanceMode)) {
            case 'ft':
                $modeDescription = "Full Time";
                break;

            case 'pt':
                $modeDescription = "Part Time";
                break;

            default:
                $modeDescription = "Unknown";
                break;
        }
        
        return $modeDescription;
    }
    
    /**
     * Get a list of attendance modes.
     * 
     * @return array Returns an array of attendance modes.
     * @since 1.0.0
     */
    public function getApplicantAttendanceModes() {
        $attendanceModes = array(
            'ft' => "Full Time (20.5 to 37 hours)",
            'pt' => "Part Time (0 to 20 hours)",
        );
        
        return $attendanceModes;
    }
    
    /**
     * Get a description of the permit status code.
     * 
     * @param string $statusCode The permit status code.
     * @return string Returns a description of the permit status.
     * @since 1.0.0
     */
    public function getPermitStatus($statusCode) {
        switch (trim($statusCode)) {
            case 'PD':
                $statusDescription = "Pending Approval";
                break;

            case 'RJ':
                $statusDescription = "Rejected";
                break;

            case 'AP':
                $statusDescription = "Approved, pending printing";
                break;

            case 'IS':
                $statusDescription = "Issued";
                break;

            case 'RP':
                $statusDescription = "Reissued, pending printing";
                break;

            case 'RI':
                $statusDescription = "Reissued";
                break;

            case 'HD':
                $statusDescription = "On Hold";
                break;

            case 'CN':
                $statusDescription = "Cancelled";
                break;

            case 'EX':
                $statusDescription = "Expired";
                break;

            default:
                $statusDescription = "Unknown";
                break;
        }

        return $statusDescription;
    }
    
    /**
     * Get a list of permit statuses.
     * 
     * @return array Returns an array of permit statuses.
     * @since 1.0.0
     */
    public function getPermitStatuses() {
        $permitStatuses = array(
            'PD' => "Pending Approval",
            'RJ' => "Rejected",
            'AP' => "Approved, pending printing",
            'IS' => "Issued",
            'RP' => "Reissued, pending printing",
            'RI' => "Reissued",
            'HD' => "On Hold",
            'CN' => "Cancelled",
            'EX' => "Expired",
        );
        
        return $permitStatuses;
    }
    
    /**
     * Get a list of the available permit types.
     * 
     * @param boolean $publicOnly If set to `TRUE` then only the publically available permits will be returned; a value of
     *   `FALSE` will return all available permits.
     * 
     * @param boolean $includeHidden If set to `TRUE` then the hidden permits will be returned along with those that are
     *   visible within the system; a value of `FALSE` will return only those that are visible.
     * 
     * @return array|null Returns an array containing the available permit types and their details.  Returns `NULL` if no
     *   data has been returned.
     * 
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.0.0
     */
    public function getPermitTypes($publicOnly = FALSE, $includeHidden = FALSE) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statements
            $sqlStatement = "SELECT permit_type.permit_type_id, permit_type.permit_code, permit_type.description, permit_type.available_public, permit_type.available_system ";
            $sqlStatement .= "FROM permit_type WHERE ";
            if ($includeHidden == TRUE) { $sqlStatement .= "(permit_type.available_system = 'y' OR permit_type.available_system = 'n') "; } else { $sqlStatement .= "permit_type.available_system = 'y' "; }
            if ($publicOnly == TRUE) { $sqlStatement .= "AND permit_type.available_public = 'y' "; }
            $sqlStatement .= "ORDER BY permit_type.description ASC;";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                return $sqlResult;
            }

        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the permit types.");
        }
    }
    
    /**
     * Get the permit type.
     * 
     * **Note:** This is an alias of the `getPermitTypeFromID()` method.
     * 
     * @param integer $permitTypeID The ID of the permit type.
     * @return array|null Returns an array containing details of the permit type.  Returns `NULL` if no data has been returned.
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.2.0
     * @see \CarParkingSystem\ParkingApplication::getPermitTypeFromID() ParkingApplication::getPermitTypeFromID()
     */
    public function getPermitType($permitTypeID) {
        try {
            return $this->getPermitTypeFromID($permitTypeID);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the details of the permit type.");
        }
    }
    
    /**
     * Get the permit type from the given permit type ID.
     * 
     * @param integer $permitTypeID The ID of the permit type.
     * @return array|null Returns an array containing details of the permit type.  Returns `NULL` if no data has been returned.
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.0.0
     * @see \CarParkingSystem\ParkingApplication::getPermitType() ParkingApplication::getPermitType()
     */
    public function getPermitTypeFromID($permitTypeID) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statements
            $sqlStatement = "SELECT permit_type.permit_type_id, permit_type.permit_code, permit_type.description, permit_type.available_public, permit_type.available_system ";
            $sqlStatement .= "FROM permit_type WHERE permit_type.permit_type_id = '{$permitTypeID}' ORDER BY permit_type.description ASC;";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                return $sqlResult[0];
            }
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the details of the permit type.");
        }
    }
    
    
    
    /* 
     * *******************************************************************
     * * Methods to manage or obatain specific data about an application *
     * *******************************************************************
     */
    
    /**
     * Create the applicant's primary details record in the database.
     * 
     * @param string $nameTitle The applicant's title.
     * @param string $firstName The applicant's first name.
     * @param string $surname The applicant's surname.
     * @param string $houseFlatProperty The house/flat number of property name.
     * @param string $addressLine1 The first line of the address.
     * @param string $addressLine2 The second line of the address.
     * @param string $addressLine3 The third line of the address.
     * @param string $postTown The address town/city.
     * @param string $county The address county.
     * @param string $postcode The address postcode.
     * @param boolean $isTermAddress If `y` the address is a term time address, otherwise `n` for a home address.
     * @param string $telephoneNumber The applicant's telephone number.
     * @param string $emailAddress The applicant's email address.
     * @param string $applicationOrigin The origin of the application, whether internal ( `int` ) or external ( `ext` ).
     * @return integer The row ID of the database record, which forms the applicant ID.
     * @throws \Exception If the data cannot be entered into the database.
     * @since 1.0.0
     */
    public function createApplicantRecord($nameTitle, $firstName, $surname, $houseFlatProperty, $addressLine1, $addressLine2, $addressLine3, $postTown, $county, $postcode, $isTermAddress, $telephoneNumber, $emailAddress, $applicationOrigin) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement
            $sqlStatement = "INSERT INTO applicant (title, first_name, surname, house_flat_property, address_1, address_2, address_3, ";
            $sqlStatement .= "post_town, county, postcode, is_term_address, telephone, email_addr, app_origin, dt_create, dt_modify) VALUES ";
            $sqlStatement .= "('" . $appDatabase->escapeString($nameTitle) . "', '" . $appDatabase->escapeString($firstName) . "', '" . $appDatabase->escapeString($surname) . "', ";
            $sqlStatement .= "'" . $appDatabase->escapeString($houseFlatProperty) . "', '" . $appDatabase->escapeString($addressLine1) . "', '" . $appDatabase->escapeString($addressLine2) . "', ";
            $sqlStatement .= "'" . $appDatabase->escapeString($addressLine3) . "', '" . $appDatabase->escapeString($postTown) . "', '" . $appDatabase->escapeString($county) . "', ";
            $sqlStatement .= "'" . $appDatabase->escapeString($postcode) . "', '{$isTermAddress}', '" . $appDatabase->escapeString($telephoneNumber) . "', '" . $appDatabase->escapeString($emailAddress) . "', ";
            $sqlStatement .= "'{$applicationOrigin}', NOW(), NOW());";
            
            // Query the database and get the record ID
            $recordID = $appDatabase->queryDatabase($sqlStatement);
            
            return $recordID;
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to create the applicant record.");
        }
    }
    
    /**
     * Update the applicant's primary details record in the database.
     * 
     * @param integer $applicantID The applicant ID.
     * @param string $nameTitle The applicant's title.
     * @param string $firstName The applicant's first name.
     * @param string $surname The applicant's surname.
     * @param string $houseFlatProperty The house/flat number of property name.
     * @param string $addressLine1 The first line of the address.
     * @param string $addressLine2 The second line of the address.
     * @param string $addressLine3 The third line of the address.
     * @param string $postTown The address town/city.
     * @param string $county The address county.
     * @param string $postcode The address postcode.
     * @param boolean $isTermAddress If `y` the address is a term time address, otherwise `n` for a home address.
     * @param string $telephoneNumber The applicant's telephone number.
     * @param string $emailAddress The applicant's email address.
     * @throws \Exception If the data could not be updated in the database.
     * @since 1.0.0
     */
    public function updateApplicantRecord($applicantID, $nameTitle, $firstName, $surname, $houseFlatProperty, $addressLine1, $addressLine2, $addressLine3, $postTown, $county, $postcode, $isTermAddress, $telephoneNumber, $emailAddress) {
        // Connect to the database, $isTermAddress
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement and query the database
            $sqlStatement = "UPDATE applicant SET title = '" . $appDatabase->escapeString($nameTitle) . "', first_name = '" . $appDatabase->escapeString($firstName) . "', ";
            $sqlStatement .= "surname = '" . $appDatabase->escapeString($surname) . "', house_flat_property = '" . $appDatabase->escapeString($houseFlatProperty) . "', ";
            $sqlStatement .= "address_1 = '" . $appDatabase->escapeString($addressLine1) . "', address_2 = '" . $appDatabase->escapeString($addressLine2) . "', ";
            $sqlStatement .= "address_3 = '" . $appDatabase->escapeString($addressLine3) . "', post_town = '" . $appDatabase->escapeString($postTown) . "', ";
            $sqlStatement .= "county = '" . $appDatabase->escapeString($county) . "', postcode = '" . $appDatabase->escapeString($postcode) . "', is_term_address = '{$isTermAddress}', ";
            $sqlStatement .= "telephone = '" . $appDatabase->escapeString($telephoneNumber) . "', email_addr = '" . $appDatabase->escapeString($emailAddress) . "', ";
            $sqlStatement .= "dt_modify = NOW() WHERE applicant.applicant_id = '{$applicantID}';";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to update the applicant record.");
        }
    }
    
    /**
     * Delete the applicant's primary details record from the database.
     * 
     * @param integer $applicantID The applicant ID.
     * @throws \Exception The `ParkingApplication::deleteApplicantData()` method must be used instead.
     * @since 1.2.0
     * @see \CarParkingSystem\ParkingApplication::deleteApplicantExtraDetailsRecord() ParkingApplication::deleteApplicantExtraDetailsRecord()
     * @see \CarParkingSystem\ParkingApplication::deleteApplicantData() ParkingApplication::deleteApplicantData()
     */
    public function deleteApplicantRecord($applicantID) {
        throw new \Exception("The 'ParkingApplication::deleteApplicantData()' method must be used instead.");
    }
    
    /**
     * Get the applicant's primary details record.
     * 
     * **Note:** This is an alias of the `getApplicantDetails()` method.
     * 
     * @param integer $applicantID The applicant ID.
     * @return array|null An array containing the applicant's primary information.  Returns `NULL` if no data has been returned.
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.2.0
     * @see \CarParkingSystem\ParkingApplication::getApplicantDetails() ParkingApplication::getApplicantDetails()
     */
    public function getApplicantRecord($applicantID) {
        try {
            return $this->getApplicantDetails($applicantID);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the applicant record.");
        }
    }
    
    /**
     * Get the applicant's primary details record.
     * 
     * @param integer $applicantID The applicant ID.
     * @return array|null An array containing the applicant's primary information.  Returns `NULL` if no data has been returned.
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.0.0
     * @see \CarParkingSystem\ParkingApplication::getApplicantRecord() ParkingApplication::getApplicantRecord()
     */
    public function getApplicantDetails($applicantID) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement
            $sqlStatement = "SELECT applicant.title, applicant.first_name, applicant.surname, applicant.house_flat_property, applicant.address_1, applicant.address_2, applicant.address_3, ";
            $sqlStatement .= "applicant.post_town, applicant.county, applicant.postcode, applicant.is_term_address, applicant.telephone, applicant.email_addr, applicant.app_origin, ";
            $sqlStatement .= "applicant.dt_create, applicant.dt_modify FROM applicant WHERE applicant.applicant_id = '{$applicantID}';";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                return $sqlResult[0];
            }
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the applicant's details.");
        }
    }
    
    /**
     * Create the applicant's additional details record in the database.
     * 
     * @param integer $applicantID The applicant ID.
     * @param string $userID The username.
     * @param string $idNumber The student number of staff payroll number.
     * @param string $attendanceMode The applicant's attendance mode, `ft` or `pt`.
     * @param boolean $staffAuthPayroll If the applicant is staff and has chosen an annual permit, they must confirm that
     *   their salary can be deducted by Payroll ( `y` ); otherwise it defaults to `n`.
     * 
     * @param string $carParkUsed The car park the applicant uses.  **NOT CURRENTLY IN USE**
     * @param string $department The applicant's department.  **NOT CURRENTLY IN USE**
     * @param string $swipeCardNumber The serial number of the access control swipe card.
     * @param string $reasonApplying For external applicants, the reason why they are applying.
     * @throws \Exception If the data cannot be entered into the database.
     * @since 1.0.0
     */
    public function createApplicantExtraDetailsRecord($applicantID, $userID = NULL, $idNumber = NULL, $attendanceMode = NULL, $staffAuthPayroll = "n", $carParkUsed = NULL, $department = NULL, $swipeCardNumber = NULL, $reasonApplying = NULL) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement and query the database
            $sqlStatement = "INSERT INTO applicant_add_info (applicant_id, user_id, id_num, attendance, staff_auth_payroll, car_park, department, swipe_card_no, reason_applying) VALUES ";
            $sqlStatement .= "('{$applicantID}', '{$userID}', '" . $appDatabase->escapeString($idNumber) . "', '" . $appDatabase->escapeString($attendanceMode) . "', ";
            $sqlStatement .= "'{$staffAuthPayroll}', '" . $appDatabase->escapeString($carParkUsed) . "', '" . $appDatabase->escapeString($department) . "', ";
            $sqlStatement .= "'" . $appDatabase->escapeString($swipeCardNumber) . "', '" . $appDatabase->escapeString($reasonApplying) . "');";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to create the applicant extra details record.");
        }
    }
    
    /**
     * Update the applicant's additional details record in the database.
     * 
     * @param integer $applicantID The applicant ID.
     * @param string $userID The username.
     * @param string $idNumber The student number of staff payroll number.
     * @param string $attendanceMode The applicant's attendance mode, `ft` or `pt`.
     * @param boolean $staffAuthPayroll If the applicant is staff and has chosen an annual permit, they must confirm that
     *   their salary can be deducted by Payroll ( `y` ); otherwise it defaults to `n`.
     * 
     * @param string $carParkUsed The car park the applicant uses.  **NOT CURRENTLY IN USE**
     * @param string $department The applicant's department.  **NOT CURRENTLY IN USE**
     * @param string $swipeCardNumber The serial number of the access control swipe card.
     * @param string $reasonApplying For external applicants, the reason why they are applying.
     * @throws \Exception If the data could not be updated in the database.
     * @since 1.0.0
     */
    public function updateApplicantExtraDetailsRecord($applicantID, $idNumber = NULL, $attendanceMode = NULL, $staffAuthPayroll = "n", $carParkUsed = NULL, $department = NULL, $swipeCardNumber = NULL, $reasonApplying = NULL) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement and query the database
            $sqlStatement = "UPDATE applicant_add_info SET id_num = '" . $appDatabase->escapeString($idNumber) . "', attendance = '" . $appDatabase->escapeString($attendanceMode) . "', ";
            $sqlStatement .= "staff_auth_payroll = '{$staffAuthPayroll}', car_park = '" . $appDatabase->escapeString($carParkUsed) . "', ";
            $sqlStatement .= "department = '" . $appDatabase->escapeString($department) . "', swipe_card_no = '" . $appDatabase->escapeString($swipeCardNumber) . "', ";
            $sqlStatement .= "reason_applying = '" . $appDatabase->escapeString($reasonApplying) . "' WHERE applicant_add_info.applicant_id = '{$applicantID}';";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to update the applicant extra details record.");
        }
    }
    
    /**
     * Delete the applicant's additional details record from the database.
     * 
     * @param integer $applicantID The applicant ID.
     * @throws \Exception The `ParkingApplication::deleteApplicantData()` method must be used instead.
     * @since 1.2.0
     * @see \CarParkingSystem\ParkingApplication::deleteApplicantRecord() ParkingApplication::deleteApplicantRecord()
     * @see \CarParkingSystem\ParkingApplication::deleteApplicantData() ParkingApplication::deleteApplicantData()
     */
    public function deleteApplicantExtraDetailsRecord($applicantID) {
        throw new \Exception("The 'ParkingApplication::deleteApplicantData()' method must be used instead.");
    }
    
    /**
     * Get the applicant's additional details record.
     * 
     * **Note:** This is an alias of the `getApplicantExtraDetails()` method.
     * 
     * @param integer $applicantID The applicant ID.
     * @return array|null An array containing the applicant's additional details.  Returns `NULL` if no data has been returned.
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.2.0
     * @see \CarParkingSystem\ParkingApplication::getApplicantExtraDetails() ParkingApplication::getApplicantExtraDetails()
     */
    public function getApplicantExtraDetailsRecord($applicantID) {
        try {
            return $this->getApplicantExtraDetails($applicantID);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the applicant's additional details record.");
        }
    }
    
    /**
     * Get the applicant's additional details record.
     * 
     * @param integer $applicantID The applicant ID.
     * @return array|null An array containing the applicant's additional details.  Returns `NULL` if no data has been returned.
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.0.0
     * @see \CarParkingSystem\ParkingApplication::getApplicantExtraDetailsRecord() ParkingApplication::getApplicantExtraDetailsRecord()
     */
    public function getApplicantExtraDetails($applicantID) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement
            $sqlStatement = "SELECT applicant_add_info.user_id, applicant_add_info.id_num, applicant_add_info.attendance, applicant_add_info.staff_auth_payroll, applicant_add_info.car_park, ";
            $sqlStatement .= "applicant_add_info.department, applicant_add_info.swipe_card_no, applicant_add_info.reason_applying FROM applicant_add_info ";
            $sqlStatement .= "WHERE applicant_add_info.applicant_id = '{$applicantID}';";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                return $sqlResult[0];
            }
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the applicant's additional details.");
        }
    }
    
    /**
     * Get the applicant ID for the given username.
     * 
     * @param string $username The username that is associated with an applicant's record.
     * @return string|null Returns the applicant ID that is associated with the username, if present; otherwise returns `NULL`.
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.0.0
     */
    public function getApplicantIDFromUsername($username) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement
            $sqlStatement = "SELECT applicant.applicant_id FROM applicant INNER JOIN applicant_add_info ON applicant.applicant_id = applicant_add_info.applicant_id WHERE ";
            $sqlStatement .= "applicant_add_info.user_id = '{$username}' ORDER BY applicant.applicant_id DESC;";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                return $sqlResult[0]['applicant_id'];
            }
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the applicant ID for the user.");
        }
    }
    
    /**
     * Get a list of permits that are associated with the applicant.
     * 
     * @param integer $applicantID The applicant ID.
     * @return array|null Returns an array of permits and their details if there are any applications; otherwise returns `NULL`.
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.0.0
     */
    public function getApplicantPermits($applicantID) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement
            $sqlStatement = "SELECT permit.permit_id, permit_type.description AS permit_type_description, permit.permit_serial_no, permit.start_date, permit.end_date, permit.status, permit.print_exclude, ";
            $sqlStatement .= "permit.dt_create, permit.dt_modify FROM permit INNER JOIN permit_type ON permit.permit_type = permit_type.permit_type_id WHERE permit.applicant_id = '{$applicantID}' ";
            $sqlStatement .= "ORDER BY permit.start_date ASC;";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                return $sqlResult;
            }
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the permits for the applicant.");
        }
    }
    
    /**
     * Get a list of applicants.
     * 
     * @return array|null Returns a two dimensional array of applicants and their details; otherwise returns `NULL`.
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.2.0
     */
    public function getApplicants() {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement
            $sqlStatement = "SELECT applicant.applicant_id, applicant.title, applicant.first_name, applicant.surname, applicant.house_flat_property, applicant.address_1, applicant.address_2, ";
            $sqlStatement .= "applicant.address_3, applicant.post_town, applicant.county, applicant.postcode, applicant.is_term_address, applicant.telephone, applicant.email_addr, ";
            $sqlStatement .= "applicant.app_origin, applicant.dt_create, applicant.dt_modify FROM applicant ORDER BY applicant.applicant_id ASC;";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                return $sqlResult;
            }
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the list of applicants.");
        }
    }
    
    /**
     * Create a record of the applicant's Blue Badge.
     * 
     * @param integer $applicantID The applicant ID.
     * @param string $serialNumber The serial number of the Blue Badge.
     * @param string $issuer The issuing authority.
     * @param string $validFrom The date the Blue Badge is valid from, in the format `YYYY-MM-DD`.
     * @param string $validTo The date the Blue Badge is valid to, in the format `YYYY-MM-DD`.
     * @param string $scanFileFront The generated filename of the uploaded photo/scan of the front of the Blue Badge.
     * @param string $scanFileBack The generated filename of the uploaded photo/scan of the back of the Blue Badge.
     * @throws \Exception If the data could not be entered into the database.
     * @since 1.0.0
     */
    public function createBlueBadgeRecord($applicantID, $serialNumber, $issuer, $validFrom, $validTo, $scanFileFront, $scanFileBack) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement and query the database
            $sqlStatement = "INSERT INTO blue_badge (applicant_id, serial_num, issuer, valid_from, valid_to, scan_file_front, scan_file_back, dt_create, dt_modify) VALUES ";
            $sqlStatement .= "('{$applicantID}', '" . $appDatabase->escapeString($serialNumber) . "', '" . $appDatabase->escapeString($issuer) . "', '{$validFrom}', '{$validTo}', '{$scanFileFront}', ";
            $sqlStatement .= "'{$scanFileBack}', NOW(), NOW());";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to create the Blue Badge record.");
        }
    }
    
    /**
     * Update a Blue Badge record.
     * 
     * @param integer $blueBadgeID The database record ID for the Blue Badge.
     * @param string $serialNumber The serial number of the Blue Badge.
     * @param string $issuer The issuing authority.
     * @param string $validFrom The date the Blue Badge is valid from in the format `YYYY-MM-DD`.
     * @param string $validTo The date the Blue Badge is valid to in the format `YYYY-MM-DD`.
     * @param string $scanFileFront The generated filename of the uploaded photo/scan of the front of the Blue Badge.
     * @param string $scanFileBack The generated filename of the uploaded photo/scan of the back of the Blue Badge.
     * @throws \Exception If the data could not be updated in the database.
     * @since 1.0.0
     */
    public function updateBlueBadgeRecord($blueBadgeID, $serialNumber, $issuer, $validFrom, $validTo, $scanFileFront, $scanFileBack) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement and query the database
            $sqlStatement = "UPDATE blue_badge SET serial_num = '" . $appDatabase->escapeString($serialNumber) . "', issuer = '" . $appDatabase->escapeString($issuer) . "', ";
            $sqlStatement .= "valid_from = '{$validFrom}', valid_to = '{$validTo}', scan_file_front = '{$scanFileFront}', scan_file_back = '{$scanFileBack}', dt_modify = NOW() ";
            $sqlStatement .= "WHERE blue_badge.blue_badge_id = '{$blueBadgeID}';";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to update the Blue Badge record.");
        }
    }
    
    /**
     * Delete the Blue Badge record from the database.
     * 
     * @param integer $blueBadgeID The database record ID for the Blue Badge.
     * @throws \Exception If the data cannot be deleted from the database.
     * @since 1.2.0
     */
    public function deleteBlueBadgeRecord($blueBadgeID) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement and query the database
            $sqlStatement = "DELETE FROM blue_badge WHERE blue_badge.blue_badge_id = '{$blueBadgeID}';";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to delete the Blue Badge record.");
        }
    }
    
    /**
     * Get the details of a specific Blue Badge record.
     * 
     * @param integer $blueBadgeID The database record ID for the Blue Badge.
     * @return array|null Returns an array containing details about the Blue Badge.  Returns `NULL` if no data has been
     *   returned.
     * 
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.0.0
     */
    public function getBlueBadgeRecord($blueBadgeID) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement and query the database
            $sqlStatement = "SELECT blue_badge.applicant_id, blue_badge.serial_num, blue_badge.issuer, blue_badge.valid_from, blue_badge.valid_to, blue_badge.scan_file_front, blue_badge.scan_file_back, ";
            $sqlStatement .= "blue_badge.dt_create, blue_badge.dt_modify FROM blue_badge WHERE blue_badge.blue_badge_id = '{$blueBadgeID}';";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                return $sqlResult[0];
            }
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the Blue Badge record.");
        }
    }
    
    /**
     * Get the Blue Badge records that are associated with an applicant.
     * 
     * @param integer $applicantID The applicant ID.
     * @return array|null Returns a two dimensional array of Blue Badge records and their details, if present; otherwise
     *   returns `NULL`.
     * 
     * @throws \Exception If the details cannot be retrieved from the database.
     * @since 1.0.0
     */
    public function getBlueBadgeRecords($applicantID) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement
            $sqlStatement = "SELECT blue_badge.blue_badge_id, blue_badge.applicant_id, blue_badge.serial_num, blue_badge.issuer, blue_badge.valid_from, blue_badge.valid_to, blue_badge.scan_file_front, ";
            $sqlStatement .= "blue_badge.scan_file_back, blue_badge.dt_create, blue_badge.dt_modify FROM blue_badge WHERE blue_badge.applicant_id = '{$applicantID}' ORDER BY blue_badge.dt_create ASC;";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                return $sqlResult;
            }
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the Blue Badge records for the applicant.");
        }
    }
    
    /**
     * Create the permit record in the database.
     * 
     * @param integer $applicantID The applicant ID.
     * @param integer $permitType The permit type ID.
     * @param string $startDate The date the permit is valid from in the format `YYYY-MM-DD`.
     * @param string $endDate The date the permit is valid until in the format `YYYY-MM-DD`.
     * @return interger The row ID of the permit record.
     * @throws \Exception If the details cannot be entered into the database.
     * @since 1.0.0
     */
    public function createPermitRecord($applicantID, $permitType, $startDate, $endDate) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement
            $sqlStatement = "INSERT INTO permit (applicant_id, permit_type, start_date, end_date, status, print_exclude, dt_create, dt_modify) VALUES ('{$applicantID}', '{$permitType}', ";
            $sqlStatement .= "'{$startDate}', '{$endDate}', 'PD', 'n', NOW(), NOW());";
            
            // Query the database and get the record ID
            $recordID = $appDatabase->queryDatabase($sqlStatement);
            
            return $recordID;
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to create the permit record.");
        }
    }
    
    /**
     * Delete the permit record from the database.
     * 
     * @param integer $permitID The database record ID for the permit.
     * @throws \Exception The `ParkingApplication::deletePermitData()` method must be used instead.
     * @since 1.2.0
     * @see \CarParkingSystem\ParkingApplication::deletePermitData() ParkingApplication::deletePermitData()
     */
    public function deletePermitRecord($permitID) {
        throw new \Exception("The 'ParkingApplication::deletePermitData()' method must be used instead.");
    }
    
    /**
     * Get the details of a specific permit record.
     * 
     * **Note:** This is an alias of the `getPermitDetails()` method.
     * 
     * @param integer $permitID The database record ID for the permit.
     * @return array|null Returns an array containing details about the permit.  Returns `NULL` if no data has been returned.
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.2.0
     * @see \CarParkingSystem\ParkingApplication::getPermitDetails() ParkingApplication::getPermitDetails()
     */
    public function getPermitRecord($permitID) {
        try {
            return $this->getPermitDetails($permitID);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the permit record.");
        }
    }
    
    /**
     * Get the details of a permit record.
     * 
     * @param integer $permitID The database record ID for the permit.
     * @return array|null Returns an array containing details about the permit.  Returns `NULL` if no data has been returned.
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.0.0
     * @see \CarParkingSystem\ParkingApplication::getPermitDetails() ParkingApplication::getPermitDetails()
     */
    public function getPermitDetails($permitID) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement
            $sqlStatement = "SELECT permit.applicant_id, permit.permit_type, permit_type.permit_code AS permit_type_code, permit_type.description AS permit_type_description, permit.permit_serial_no, ";
            $sqlStatement .= "permit.start_date, permit.end_date, permit.status, permit.print_exclude, permit.dt_create, permit.dt_modify FROM permit ";
            $sqlStatement .= "INNER JOIN permit_type ON permit.permit_type = permit_type.permit_type_id WHERE permit.permit_id = '{$permitID}';";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                return $sqlResult[0];
            }
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the permit details.");
        }
    }
    
    /**
     * Generates the serial number for a permit record.
     * 
     * Due to the permit serial number prefixes varying in length, either being three or four alpha characters, the serial
     * number generator uses a special process to ensure that a unique sequential number is generated.  Therefore, the
     * serial number consists of a seven digit sequential number that is preceeded by a modified permit type code, which is
     * in one of the following formats:-
     *  + `AAA0`: Three alpha permit type code suffixed with a `0` to form a four character string.
     *  + `AAAA`: Four alpha permit type code.
     * 
     * This allows for **9,999,999** unique numbers for each permit type before the string length will increase.
     * 
     * The serial number is generated using the following sequence:-
     *  1. Get the permit type ID and code for the given permit record.
     *  2. Identify the serial number of the last permit issued:-
     *    - Check the permit records first:-
     *      1. Search the permit records and retrieve the serial number of the last permit issued of that permit type ID.
     *      2. If there is a record, strip the first four characters from the serial number, so that that only the numeric part
     *        remains.
     * 
     *    - Otherwise the previous serial number will be `0`.
     * 
     *  3. Increment the last serial number by `1` and pad the string to seven numbers.  For example: `1` will become `0000001`.
     *  4. Prefix the new serial number with the permit type code to form the full serial number.
     *  5. Update the permit record with the full serial number.
     * 
     * @param interger $permitID The database record ID for the permit.
     * @throws \Exception If there was a problem retrieving from or entering data into the database.
     * @since 1.0.0
     */
    public function generatePermitSerialNumber($permitID) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        
        // Get the type of the given permit
        try {
            $currentPermitDetails = $this->getPermitDetails($permitID);
            $currentPermitType = $currentPermitDetails['permit_type'];
            $currentPermitTypeCode = $currentPermitDetails['permit_type_code'];
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the type of the given permit.");
        }
        
        
        // Get the serial number of the last permit issued of the same type
        try {
            // Initalise the serial number
            $lastSerialNumber = 0;
            
            // Create the SQL statement
            $sqlStatement = "SELECT permit.permit_serial_no FROM permit WHERE permit.permit_type = '{$currentPermitType}' AND permit.permit_serial_no != '' ORDER BY ";
            $sqlStatement .= "permit.permit_serial_no DESC, permit.permit_id DESC;";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                $lastSerialNumber = $sqlResult[0]['permit_serial_no'];
            }
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to get the serial number of the last permit issued of the same type.");
        }
        
        
        // Generate the serial number for the given permit
        try {
            // Remove the prefix (3 alpha + 1 int, or 4 alpha) and increment the numeric by 1, padding it to 7 numbers
            $serialNumberNumeric = str_pad((substr($lastSerialNumber, 4) + 1), 7, "0", STR_PAD_LEFT);
            
            // Create the appropriate prefix for the serial number; if 3 char then suffix a "0" to the prefix, so that it becomes 4 char
            $serialNumberPrefix = ((strlen($currentPermitTypeCode) == 3) ? "{$currentPermitTypeCode}0" : $currentPermitTypeCode);
            
            // Merge the prefix and numeric parts
            $serialNumber = $serialNumberPrefix . $serialNumberNumeric;
            
            // Create the SQL statement and query the database
            $sqlStatement = "UPDATE permit SET permit.permit_serial_no = '{$serialNumber}', dt_modify = NOW() WHERE permit.permit_id = '{$permitID}';";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to generate permit serial number.");
        }
    }
    
    /**
     * Update the status of a permit record.
     * 
     * @param integer $permitID The database record ID for the permit.
     * @param string $statusCode The new status code.
     * @throws \Exception If the data could not be updated in the database.
     * @since 1.0.0
     */
    public function setPermitStatus($permitID, $statusCode) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement
            $sqlStatement = "UPDATE permit SET permit.status = '{$statusCode}', dt_modify = NOW() WHERE permit.permit_id = '{$permitID}';";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to update the permit status.");
        }
    }
    
    /**
     * Set the print export exclusion flag for a permit record.
     * 
     * The flag allows a permit to be excluded from the nightly export process that collates permit data so that they can be
     * printed.  Setting the flag to `y` will cause the permit to be excluded and setting it to `n` will cause it to be
     * included.
     * 
     * @param integer $permitID The database record ID for the permit.
     * @param boolean $exclude Whether the permit should ( `y` ) or shouldn't ( `n` ) be excluded from printing.
     * @throws \Exception If the data cannot be updated in the database.
     * @since 1.0.0
     */
    public function setPermitPrintExcludeFlag($permitID, $exclude = "y") {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement and query the database
            $sqlStatement = "UPDATE permit SET permit.print_exclude = '{$exclude}', dt_modify = NOW() WHERE permit.permit_id = '{$permitID}';";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to update the permit print exclusion flag.");
        }
    }
    
    /**
     * Create a note that will be associated with a permit record.
     * 
     * @param integer $permitID The database record ID for the permit.
     * @param string $noteText The note text.
     * @param string $noteAuthor The username of user who wrote the note text.
     * @throws \Exception If the data cannot be entered into the database.
     * @since 1.0.0
     */
    public function createPermitNote($permitID, $noteText, $noteAuthor) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement and query the database
            $sqlStatement = "INSERT INTO permit_note (permit_id, note_text, dt_create, user_create) VALUES ('{$permitID}', '" . $appDatabase->escapeString($noteText) . "', NOW(), '{$noteAuthor}');";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to create the permit note.");
        }
    }
    
    /**
     * Get a specific permit note.
     * 
     * @param integer $permitNoteID The database record ID of the permit note.
     * @return array|null Returns the permit note details, otherwise returns `NULL` if no data has been returned.
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.0.0
     */
    public function getPermitNote($permitNoteID) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement
            $sqlStatement = "SELECT permit_note.note_text, permit_note.dt_create, permit_note.user_create, permit_note.dt_modify, permit_note.user_modify FROM permit_note ";
            $sqlStatement .= "WHERE permit_note.permit_note_id = '{$permitNoteID}';";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                return $sqlResult[0];
            }
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the permit note.");
        }
    }
    
    /**
     * Get the permit notes that are associated with a permit record.
     * 
     * @param integer $permitID The database record ID for the permit.
     * @return array|null Returns a two dimensional array of permit notes and their details, otherwise returns `NULL` if no
     *   data has been returned.
     * 
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.0.0
     */
    public function getPermitNotes($permitID) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement
            $sqlStatement = "SELECT permit_note.permit_note_id, permit_note.note_text, permit_note.dt_create, permit_note.user_create, permit_note.dt_modify, permit_note.user_modify ";
            $sqlStatement .= "FROM permit_note WHERE permit_note.permit_id = '{$permitID}' ORDER BY permit_note.dt_create ASC;";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                return $sqlResult;
            }
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the permit note.");
        }
    }
    
    /**
     * Get the vehicles that are associated with a permit record.
     * 
     * @param integer $permitID The database record ID for the permit.
     * @return array|null Returns a two dimensional array of vehicle details, otherwise returns `NULL` if no data has been returned.
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.0.0
     */
    public function getPermitVehicles($permitID) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement
            $sqlStatement = "SELECT vehicle.vehicle_id, vehicle.registration, vehicle.make, vehicle.colour, vehicle.dt_create, vehicle.dt_modify FROM vehicle ";
            $sqlStatement .= "INNER JOIN jn_vehicle_permit ON vehicle.vehicle_id  = jn_vehicle_permit.vehicle_id ";
            $sqlStatement .= "INNER JOIN permit ON jn_vehicle_permit.permit_id = permit.permit_id WHERE permit.permit_id = '{$permitID}' ORDER BY vehicle.registration ASC;";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                return $sqlResult;
            }
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the vehicles for the given permit.");
        }
    }
    
    /**
     * Get the permit and associated applicant records for permits that are in the given status and of the optional permit type.
     * 
     * @param string $statusCode The permit status code.
     * @param string $permitTypeCode The permit type code.
     * @return array|null Returns a two dimensional array of permit and associated applicant records, otherwise returns `NULL`
     *   if no data has been returned.
     * 
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.0.0
     */
    public function getPermitApplicationsByStatus($statusCode, $permitTypeCode = NULL) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement
            $sqlStatement = "SELECT permit.permit_id, permit_type.permit_code AS permit_type_code, permit_type.description AS permit_type_description, permit.permit_serial_no, permit.start_date, ";
            $sqlStatement .= "permit.end_date, permit.status, permit.print_exclude, permit.dt_create, permit.dt_modify, applicant.applicant_id, applicant.title, applicant.first_name, ";
            $sqlStatement .= "applicant.surname FROM permit INNER JOIN permit_type ON permit.permit_type = permit_type.permit_type_id ";
            $sqlStatement .= "INNER JOIN applicant ON permit.applicant_id = applicant.applicant_id WHERE permit.status = '{$statusCode}' ";
            if ($permitTypeCode != NULL) ($sqlStatement .= "AND permit_type.permit_code = '{$permitTypeCode}' ");
            $sqlStatement .= "ORDER BY permit.dt_create ASC;";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                return $sqlResult;
            }
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the permit applications in the given status.");
        }
    }
    
    /**
     * Create a transaction log entry that will be associated with a permit record.
     * 
     * @param integer $permitID The database record ID for the permit.
     * @param string $transaction A string containing details about the transaction that took place.
     * @param string $username The username of the user who performed the transaction.
     * @throws \Exception If the data could not be entered into the database.
     * @since 1.0.0
     */
    public function createPermitTransactionLogEntry($permitID, $transaction, $username) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement and query the database
            $sqlStatement = "INSERT INTO permit_transaction_log (permit_id, transaction, timestamp, user) VALUES ('{$permitID}', '" . $appDatabase->escapeString($transaction) . "', NOW(), '{$username}');";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to create the permit transaction log entry.");
        }
    }
    
    /**
     * Get the transaction log entries for a permit record.
     * 
     * @param integer $permitID The database record ID for the permit.
     * @return array|null Returns a two dimensional array containing transaction log entries, otherwise returns `NULL` if no data
     *   has been returned.
     * 
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.0.0
     */
    public function getPermitTransactionLogEntries($permitID) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement
            $sqlStatement = "SELECT permit_transaction_log.transaction, permit_transaction_log.timestamp, permit_transaction_log.user FROM permit_transaction_log ";
            $sqlStatement .= "WHERE permit_transaction_log.permit_id = '{$permitID}' ORDER BY permit_transaction_log.timestamp ASC;";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                return $sqlResult;
            }
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the permit transaction log entries.");
        }
    }
    
    /**
     * Create the vehicle record in the database.
     * 
     * @param integer $permitID The database record ID for the permit.
     * @param string $registrationMark The Vehicle Registration Mark.
     * @param string $make The make of the vehicle.
     * @param string $colour The colour of the vehicle.
     * @throws \Exception If the data could not be entered in the database.
     * @since 1.0.0
     */
    public function createVehicleRecord($permitID, $registrationMark, $make, $colour) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        // Initalise the vehicle record ID
        $vehicleRecordID = NULL;
        
        
        // Vehicle record
        try {
            // Create the SQL statement
            $sqlStatement = "INSERT INTO vehicle (registration, make, colour, dt_create, dt_modify) VALUES ('" . $appDatabase->escapeString($registrationMark) . "', ";
            $sqlStatement .= "'" . $appDatabase->escapeString($make) . "', '" . $appDatabase->escapeString($colour) . "', NOW(), NOW());";
            
            // Query the database and get the record ID
            $vehicleRecordID = $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to create the vehicle record.");
        }
        
        
        // Vehicle permit record
        try {
            // Create the SQL statement and query the database
            $sqlStatement = "INSERT INTO jn_vehicle_permit (vehicle_id, permit_id) VALUES ('{$vehicleRecordID}', '{$permitID}');";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to create the vehicle permit record.");
        }
    }
    
    /**
     * Update the vehicle record in the database.
     * 
     * @param integer $vehicleID The database record ID for the vehicle.
     * @param string $registrationMark The Vehicle Registration Mark.
     * @param string $make The make of the vehicle.
     * @param string $colour The colour of the vehicle.
     * @throws \Exception If the data cannot be updated in the database.
     * @since 1.0.0
     */
    public function updateVehicleRecord($vehicleID, $registrationMark, $make, $colour) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement and query the database
            $sqlStatement = "UPDATE vehicle SET registration = '" . $appDatabase->escapeString($registrationMark) . "', make = '" . $appDatabase->escapeString($make) . "', ";
            $sqlStatement .= "colour = '" . $appDatabase->escapeString($colour) . "', dt_modify = NOW() WHERE vehicle_id = '{$vehicleID}';";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to update the vehicle record.");
        }
    }
    
    /**
     * Delete the vehicle record from the database.
     * 
     * @param integer $vehicleID The database record ID for the vehicle.
     * @throws \Exception If the data cannot be deleted from the database.
     * @since 1.2.0
     */
    public function deleteVehicleRecord($vehicleID) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement and query the database
            $sqlStatement = "DELETE FROM vehicle, jn_vehicle_permit INNER JOIN jn_vehicle_permit ON jn_vehicle_permit.vehicle_id = vehicle.vehicle_id ";
            $sqlStatement .= "WHERE vehicle.vehicle_id = '{$vehicleID}';";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to delete the vehicle record.");
        }
    }
    
    /**
     * Get the details of a vehicle record.
     * 
     * **Note:** This is an alias of the `getVehicleDetails()` method.
     * 
     * @param integer $vehicleID The database record ID for the vehicle.
     * @return array|null Returns an array containing details about the permit.  Returns `NULL` if no data has been returned.
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.2.0
     * @see \CarParkingSystem\ParkingApplication::getVehicleDetails() ParkingApplication::getVehicleDetails()
     */
    public function getVehicleRecord($vehicleID) {
        try {
            return $this->getVehicleDetails($vehicleID);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the vehicle record.");
        }
    }
    
    /**
     * Get the details of a vehicle record.
     * 
     * @param integer $vehicleID The database record ID for the vehicle.
     * @return array|null Returns an array containing details about the vehicle, otherwise returns `NULL` if no data has been returned.
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.0.0
     * @see \CarParkingSystem\ParkingApplication::getVehicleRecord() ParkingApplication::getVehicleRecord()
     */
    public function getVehicleDetails($vehicleID) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement and
            $sqlStatement = "SELECT vehicle.registration, vehicle.make, vehicle.colour, vehicle.dt_create, vehicle.dt_modify FROM vehicle WHERE vehicle.vehicle_id = '{$vehicleID}';";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                return $sqlResult[0];
            }
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the vehicle details.");
        }
    }
    
    
    
    /* 
     * *******************************************
     * * Methods to bulk delete application data *
     * *******************************************
     */
    
    /**
     * Delete all stale applicant records and associated data.
     * 
     * The data that will be deleted includes:
     *  + Applicants' primary details record
     *  + Applicants' additional details record
     *  + Applicants' Blue Badge records
     *  + Applicants' permit records
     *  + Notes made against a specific permit
     *  + Transaction log for a specific permit
     *  + Vehicle data associated with a specific permit
     * 
     * @throws \Exception If the data cannot be deleted from the database.
     * @since 1.2.0
     */
    public function deleteAllStaleApplicantData() {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement and query the database
            $sqlStatement = "DELETE applicant, applicant_add_info, blue_badge, permit, permit_note, permit_transaction_log, jn_vehicle_permit, vehicle FROM applicant ";
            $sqlStatement .= "LEFT JOIN applicant_add_info ON applicant_add_info.applicant_id = applicant.applicant_id ";
            $sqlStatement .= "LEFT JOIN blue_badge ON blue_badge.applicant_id = applicant.applicant_id ";
            $sqlStatement .= "INNER JOIN permit ON permit.applicant_id = applicant.applicant_id ";
            $sqlStatement .= "LEFT JOIN permit_note ON permit_note.permit_id = permit.permit_id ";
            $sqlStatement .= "INNER JOIN permit_transaction_log ON permit_transaction_log.permit_id = permit.permit_id ";
            $sqlStatement .= "INNER JOIN jn_vehicle_permit ON jn_vehicle_permit.permit_id = permit.permit_id ";
            $sqlStatement .= "INNER JOIN vehicle ON vehicle.vehicle_id = jn_vehicle_permit.vehicle_id ";
            $sqlStatement .= "WHERE applicant.dt_modify <= DATE('{$this->dateDataStaleBefore}');";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to delete the stale applicant records and associated data.");
        }
    }
    
    /**
     * Get the details for all stale Blue Badge records.
     * 
     * @return array|null Returns a two dimensional array of Blue Badge records and their details, if present; otherwise
     *   returns `NULL`.
     * 
     * @throws \Exception If the details cannot be retrieved from the database.
     * @since 1.2.0
     */
    public function getAllStaleBlueBadgeRecords() {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement
            $sqlStatement = "SELECT blue_badge.blue_badge_id, blue_badge.applicant_id, blue_badge.serial_num, blue_badge.issuer, blue_badge.valid_from, blue_badge.valid_to, blue_badge.scan_file_front, ";
            $sqlStatement .= "blue_badge.scan_file_back, blue_badge.dt_create, blue_badge.dt_modify FROM blue_badge WHERE blue_badge.valid_to <= DATE('{$this->dateDataStaleBefore}') ";
            $sqlStatement .= "ORDER BY blue_badge.dt_create ASC;";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                return $sqlResult;
            }
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the stale Blue Badge records.");
        }
    }
    
    /**
     * Delete all stale Blue Badge records.
     * 
     * @throws \Exception If the data cannot be deleted from the database.
     * @since 1.2.0
     */
    public function deleteAllStaleBlueBadgeData() {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement and query the database
            $sqlStatement = "DELETE FROM blue_badge WHERE blue_badge.valid_to <= DATE('{$this->dateDataStaleBefore}');";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to delete the stale Blue Badge records.");
        }
    }
    
    /**
     * Delete all stale permit records and associated data.
     * 
     * The data that will be deleted includes:
     *  + Applicants' permit records
     *  + Notes made against a specific permit
     *  + Transaction log for a specific permit
     *  + Vehicle data associated with a specific permit
     * 
     * @throws \Exception If the data cannot be deleted from the database.
     * @since 1.2.0
     */
    public function deleteAllStalePermitData() {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement and query the database
            $sqlStatement = "DELETE permit, permit_note, permit_transaction_log, jn_vehicle_permit, vehicle FROM permit ";
            $sqlStatement .= "LEFT JOIN permit_note ON permit_note.permit_id = permit.permit_id ";
            $sqlStatement .= "INNER JOIN permit_transaction_log ON permit_transaction_log.permit_id = permit.permit_id ";
            $sqlStatement .= "INNER JOIN jn_vehicle_permit ON jn_vehicle_permit.permit_id = permit.permit_id ";
            $sqlStatement .= "INNER JOIN vehicle ON vehicle.vehicle_id = jn_vehicle_permit.vehicle_id ";
            $sqlStatement .= "WHERE permit.end_date <= DATE('{$this->dateDataStaleBefore}');";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to delete the stale permit records and associated data.");
        }
    }
    
    /**
     * Delete the data that is associated with the specified applicant record.
     * 
     * The data that will be deleted includes:
     *  + Applicant's primary details record
     *  + Applicant's additional details record
     *  + Applicant's Blue Badge records
     *  + Applicant's permit records
     *  + Notes made against a specific permit
     *  + Transaction log for a specific permit
     *  + Vehicle data associated with a specific permit
     * 
     * @param integer $applicantID The applicant ID.
     * @throws \Exception If the data cannot be deleted from the database.
     * @since 1.2.0
     * @see \CarParkingSystem\ParkingApplication::deleteApplicantRecord() ParkingApplication::deleteApplicantRecord()
     * @see \CarParkingSystem\ParkingApplication::deleteApplicantExtraDetailsRecord() ParkingApplication::deleteApplicantExtraDetailsRecord()
     */
    public function deleteApplicantData($applicantID) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement and query the database
            $sqlStatement = "DELETE applicant, applicant_add_info, blue_badge, permit, permit_note, permit_transaction_log, jn_vehicle_permit, vehicle FROM applicant ";
            $sqlStatement .= "LEFT JOIN applicant_add_info ON applicant_add_info.applicant_id = applicant.applicant_id ";
            $sqlStatement .= "LEFT JOIN blue_badge ON blue_badge.applicant_id = applicant.applicant_id ";
            $sqlStatement .= "INNER JOIN permit ON permit.applicant_id = applicant.applicant_id ";
            $sqlStatement .= "LEFT JOIN permit_note ON permit_note.permit_id = permit.permit_id ";
            $sqlStatement .= "INNER JOIN permit_transaction_log ON permit_transaction_log.permit_id = permit.permit_id ";
            $sqlStatement .= "INNER JOIN jn_vehicle_permit ON jn_vehicle_permit.permit_id = permit.permit_id ";
            $sqlStatement .= "INNER JOIN vehicle ON vehicle.vehicle_id = jn_vehicle_permit.vehicle_id ";
            $sqlStatement .= "WHERE applicant.applicant_id = '{$applicantID}';";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to delete the applicant record and associated data.");
        }
    }
    
    /**
     * Delete the data that is associated with the specified permit record.
     * 
     * The data that will be deleted includes:
     *  + The permit record
     *  + Notes made against the permit
     *  + Transaction log for the permit
     *  + Vehicle data associated with the permit
     * 
     * @param integer $permitID The database record ID for the permit.
     * @throws \Exception If the data cannot be deleted from the database.
     * @since 1.2.0
     * @see \CarParkingSystem\ParkingApplication::deletePermitRecord() ParkingApplication::deletePermitRecord()
     */
    public function deletePermitData($permitID) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement and query the database
            $sqlStatement = "DELETE permit, permit_note, permit_transaction_log, jn_vehicle_permit, vehicle FROM permit ";
            $sqlStatement .= "LEFT JOIN permit_note ON permit_note.permit_id = permit.permit_id ";
            $sqlStatement .= "INNER JOIN permit_transaction_log ON permit_transaction_log.permit_id = permit.permit_id ";
            $sqlStatement .= "INNER JOIN jn_vehicle_permit ON jn_vehicle_permit.permit_id = permit.permit_id ";
            $sqlStatement .= "INNER JOIN vehicle ON vehicle.vehicle_id = jn_vehicle_permit.vehicle_id ";
            $sqlStatement .= "WHERE permit.permit_id = '{$permitID}';";
            $appDatabase->queryDatabase($sqlStatement);
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to delete the permit record and associated data.");
        }
    }
    
    
    
    /* 
     * *******************************
     * * Methods to generate reports *
     * *******************************
     */
    
    /**
     * Get permit status data that can be used to generate a report.
     * 
     * @param string $dateFrom The date to search from, in the format `YYYY-MM-DD`.
     * @param string $dateTo The date to search until, in the format `YYYY-MM-DD`.
     * @param string $permitStatusCode The permit status code.
     * @param string $permitTypeCode The permit type code.
     * @return array|null Returns a two dimensional array of permit status data, if present; otherwise returns `NULL`.
     * @throws \Exception If the data cannot be retrieved from the database.
     * @since 1.2.0
     */
    public function getReportDataPermitStatus($dateFrom, $dateTo, $permitStatusCode, $permitTypeCode) {
        // Connect to the database
        $appDatabase = new \CarParkingSystem\AppDatabase();
        
        try {
            // Create the SQL statement
            $sqlStatement = "SELECT permit.permit_id, permit_type.permit_code, permit_type.description AS permit_type_description, permit.permit_serial_no, permit.status ";
            $sqlStatement .= "FROM permit LEFT JOIN permit_type ON permit_type.permit_type_id = permit.permit_type ";
            $sqlStatement .= "WHERE (CAST(permit.start_date AS DATE) BETWEEN CAST('{$dateFrom}' AS DATE) AND CAST('{$dateTo}' AS DATE)) AND ";
            $sqlStatement .= "permit.status = '{$permitStatusCode}' AND permit_type.permit_code = '{$permitTypeCode}';";
            
            // Query the database
            if ($sqlResult = $appDatabase->queryDatabase($sqlStatement)) {
                return $sqlResult;
            }
        
        } catch (\Exception $ex) {
            throw new \Exception("Unable to retrieve the report data on permit statuses.");
        }
    }
    
    
    
    /* 
     * *******************************************
     * * Methods to generate email notifications *
     * *******************************************
     */
    
    /**
     * Generate an email notification informing the applicant that their application has been submitted.
     * 
     * @param string $applicantTitle The applicant's title.
     * @param string $applicantFirstName The applicant's first name.
     * @param string $applicantSurname The applicant's surname.
     * @param string $applicantEmailAddress The applicant's email address.
     * @param string $permitType The permit type ID.
     * @param string $permitValidFrom The date the permit is valid from in the format `YYYY-MM-DD`.
     * @param string $permitValidTo The date the permit is valid until in the format `YYYY-MM-DD`.
     * @param string $vehicle1VRM The Vehicle Registration Mark of vehicle 1.
     * @param string $vehicle2VRM The Vehicle Registration Mark of vehicle 2, if present.
     * @return boolean Returns `TRUE`.
     * @since 1.0.0
     */
    public function generateEmailApplicationSubmitted($applicantTitle, $applicantFirstName, $applicantSurname, $applicantEmailAddress, $permitType, $permitValidFrom, $permitValidTo, $vehicle1VRM, $vehicle2VRM = NULL) {
        // Create an unique ID to serve as the multipart boundary
        $notificationMultipartBoundary = "MULTIPART_" . md5(rand());
        
        // Create the email headers
        $notificationEmailHeaders = "From: University of Sunderland - Parking Services <parkingservices@sunderland.ac.uk>\r\n"
                ."Date: " . date("r") . "\r\n"
                ."Return-Path: <parkingservices@sunderland.ac.uk>\r\n"
                ."MIME-Version: 1.0\r\n"
                ."Content-type: multipart/alternative;\r\n"
                ."  boundary=\"{$notificationMultipartBoundary}\"\r\n"
                ."Auto-Submitted: auto-generated\r\n"
                ."Precedence: first-class\r\n"
                ."X-Priority: 3\r\n"
                ."X-MSMail-Priority: Normal\r\n"
                ."Priority: Normal\r\n"
                ."Importance: Normal\r\n"
                ."X-Mailer: UoS/CarParking/ApplicationSubmitted\r\n";
        
        // Create the Plain Text part
        $notificationEmailMessageBodyFormatPlain = "Dear {$applicantTitle} {$applicantSurname},\r\n";
        $notificationEmailMessageBodyFormatPlain .= "\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Thank you for submitting your application for a parking permit.  Your\r\n";
        $notificationEmailMessageBodyFormatPlain .= "application will now be processed and an approval notification in due\r\n";
        $notificationEmailMessageBodyFormatPlain .= "course.  You can use the temporary permit below whilst parking in the\r\n";
        $notificationEmailMessageBodyFormatPlain .= "University car parks until the date displayed below.  A pay and\r\n";
        $notificationEmailMessageBodyFormatPlain .= "display ticket must be displayed with the temporary permit where\r\n";
        $notificationEmailMessageBodyFormatPlain .= "relevant.";
        $notificationEmailMessageBodyFormatPlain .= "\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Yours faithfully,\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Parking Services,\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Facilities\r\n";
        $notificationEmailMessageBodyFormatPlain .= "\r\n";
        $notificationEmailMessageBodyFormatPlain .= "======================================================================\r\n";
        $notificationEmailMessageBodyFormatPlain .= "\r\n";
        $notificationEmailMessageBodyFormatPlain .= "";
        $notificationEmailMessageBodyFormatPlain .= "** PLEASE DISPLAY THIS PORTION OF THE EMAIL ON YOUR DASHBOARD AS IT ISr\n";
        $notificationEmailMessageBodyFormatPlain .= "YOUR TEMPORARY PERMIT.  THIS PERMIT IS NON-TRANSFERABLE. **\r\n";
        $notificationEmailMessageBodyFormatPlain .= "\r\n";
        $notificationEmailMessageBodyFormatPlain .= "PERMIT TYPE: {$permitType}\r\n";
        $notificationEmailMessageBodyFormatPlain .= "\r\n";
        $notificationEmailMessageBodyFormatPlain .= "VEHICLE 1: " . strtoupper($vehicle1VRM) . "\r\n";
        if ($vehicle2VRM != NULL) { $notificationEmailMessageBodyFormatPlain .= "VEHICLE 2: " . strtoupper($vehicle2VRM) . "\r\n"; }
        $notificationEmailMessageBodyFormatPlain .= "\r\n";
        $notificationEmailMessageBodyFormatPlain .= "VALID FROM: " . date('d/m/Y', strtotime($permitValidFrom)) . "\r\n";
        $notificationEmailMessageBodyFormatPlain .= "VALID UNTIL: " . date('d/m/Y', strtotime($permitValidTo)) . "\r\n";
        
        // Create the HTML part
        $notificationEmailMessageBodyFormatHTML = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" =
\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">
<html xmlns=3D\"http://www.w3.org/1999/xhtml\">
<head>
    <meta http-equiv=3D\"Content-Type\" content=3D\"text/html; =
charset=3Dutf-8\" />
    <meta name=3D\"viewport\" content=3D\"width=3Ddevice-width\"/>
    <style>
        /**********************************************
        * Ink v1.0.5 - Copyright 2013 ZURB Inc        *
        **********************************************/

        /* Client-specific Styles & Reset */
        #outlook a {=20
            padding:0;=20
        }=20

        body{=20
            width:100% !important;=20
            min-width: 100%;
            -webkit-text-size-adjust:100%;=20
            -ms-text-size-adjust:100%;=20
            margin:0;=20
            padding:0;
        }

        .ExternalClass {=20
            width:100%;
        }=20

        .ExternalClass,=20
        .ExternalClass p,=20
        .ExternalClass span,=20
        .ExternalClass font,=20
        .ExternalClass td,=20
        .ExternalClass div {=20
            line-height: 100%;=20
        }=20

        #backgroundTable {=20
            margin:0;=20
            padding:0;=20
            width:100% !important;=20
            line-height: 100% !important;=20
        }

        img {=20
            outline:none;=20
            text-decoration:none;=20
            -ms-interpolation-mode: bicubic;
            width: auto;
            max-width: 100%;=20
            float: left;=20
            clear: both;=20
            display: block;
        }

        center {
            width: 100%;
            min-width: 580px;
        }

        a img {=20
            border: none;
        }

        p {
            margin: 0 0 0 10px;
        }

        table {
            border-spacing: 0;
            border-collapse: collapse;
        }

        td {=20
            word-break: break-word;
            -webkit-hyphens: auto;
            -moz-hyphens: auto;
            hyphens: auto;
            border-collapse: collapse !important;=20
        }

        table, tr, td {
            padding: 0;
            vertical-align: top;
            text-align: left;
        }

        hr {
            color: #d9d9d9;=20
            background-color: #d9d9d9;=20
            height: 1px;=20
            border: none;
        }
       =20
       =20
        /* Responsive Grid */
        table.body {
            height: 100%;
            width: 100%;
        }

        table.container {
            width: 580px;
            margin: 0 auto;
            text-align: inherit;
        }

        table.row {=20
            padding: 0px;=20
            width: 100%;
            position: relative;
        }

        table.container table.row {
            display: block;
        }

        td.wrapper {
            padding: 10px 20px 0px 0px;
            position: relative;
        }

        table.columns,
        table.column {
            margin: 0 auto;
        }

        table.columns td,
        table.column td {
            padding: 0px 0px 10px;=20
        }

        table.columns td.sub-columns,
        table.column td.sub-columns,
        table.columns td.sub-column,
        table.column td.sub-column {
            padding-right: 10px;
        }

        td.sub-column, td.sub-columns {
            min-width: 0px;
        }

        table.row td.last,
        table.container td.last {
            padding-right: 0px;
        }

        table.one { width: 30px; }
        table.two { width: 80px; }
        table.three { width: 130px; }
        table.four { width: 180px; }
        table.five { width: 230px; }
        table.six { width: 280px; }
        table.seven { width: 330px; }
        table.eight { width: 380px; }
        table.nine { width: 430px; }
        table.ten { width: 480px; }
        table.eleven { width: 530px; }
        table.twelve { width: 580px; }

        table.one center { min-width: 30px; }
        table.two center { min-width: 80px; }
        table.three center { min-width: 130px; }
        table.four center { min-width: 180px; }
        table.five center { min-width: 230px; }
        table.six center { min-width: 280px; }
        table.seven center { min-width: 330px; }
        table.eight center { min-width: 380px; }
        table.nine center { min-width: 430px; }
        table.ten center { min-width: 480px; }
        table.eleven center { min-width: 530px; }
        table.twelve center { min-width: 580px; }

        table.one .panel center { min-width: 10px; }
        table.two .panel center { min-width: 60px; }
        table.three .panel center { min-width: 110px; }
        table.four .panel center { min-width: 160px; }
        table.five .panel center { min-width: 210px; }
        table.six .panel center { min-width: 260px; }
        table.seven .panel center { min-width: 310px; }
        table.eight .panel center { min-width: 360px; }
        table.nine .panel center { min-width: 410px; }
        table.ten .panel center { min-width: 460px; }
        table.eleven .panel center { min-width: 510px; }
        table.twelve .panel center { min-width: 560px; }

        .body .columns td.one,
        .body .column td.one { width: 8.333333%; }
        .body .columns td.two,
        .body .column td.two { width: 16.666666%; }
        .body .columns td.three,
        .body .column td.three { width: 25%; }
        .body .columns td.four,
        .body .column td.four { width: 33.333333%; }
        .body .columns td.five,
        .body .column td.five { width: 41.666666%; }
        .body .columns td.six,
        .body .column td.six { width: 50%; }
        .body .columns td.seven,
        .body .column td.seven { width: 58.333333%; }
        .body .columns td.eight,
        .body .column td.eight { width: 66.666666%; }
        .body .columns td.nine,
        .body .column td.nine { width: 75%; }
        .body .columns td.ten,
        .body .column td.ten { width: 83.333333%; }
        .body .columns td.eleven,
        .body .column td.eleven { width: 91.666666%; }
        .body .columns td.twelve,
        .body .column td.twelve { width: 100%; }

        td.offset-by-one { padding-left: 50px; }
        td.offset-by-two { padding-left: 100px; }
        td.offset-by-three { padding-left: 150px; }
        td.offset-by-four { padding-left: 200px; }
        td.offset-by-five { padding-left: 250px; }
        td.offset-by-six { padding-left: 300px; }
        td.offset-by-seven { padding-left: 350px; }
        td.offset-by-eight { padding-left: 400px; }
        td.offset-by-nine { padding-left: 450px; }
        td.offset-by-ten { padding-left: 500px; }
        td.offset-by-eleven { padding-left: 550px; }

        td.expander {
            visibility: hidden;
            width: 0px;
            padding: 0 !important;
        }

        table.columns .text-pad,
        table.column .text-pad {
            padding-left: 10px;
            padding-right: 10px;
        }

        table.columns .left-text-pad,
        table.columns .text-pad-left,
        table.column .left-text-pad,
        table.column .text-pad-left {
            padding-left: 10px;
        }

        table.columns .right-text-pad,
        table.columns .text-pad-right,
        table.column .right-text-pad,
        table.column .text-pad-right {
            padding-right: 10px;
        }
       =20
       =20
        /* Block Grid */
        .block-grid {
            width: 100%;
            max-width: 580px;
        }

        .block-grid td {
            display: inline-block;
            padding:10px;
        }

        .two-up td {
            width:270px;
        }

        .three-up td {
            width:173px;
        }

        .four-up td {
            width:125px;
        }

        .five-up td {
            width:96px;
        }

        .six-up td {
            width:76px;
        }

        .seven-up td {
            width:62px;
        }

        .eight-up td {
            width:52px;
        }
       =20
       =20
        /* Alignment & Visibility Classes */
        table.center, td.center {
            text-align: center;
        }

        h1.center,
        h2.center,
        h3.center,
        h4.center,
        h5.center,
        h6.center {
            text-align: center;
        }

        span.center {
            display: block;
            width: 100%;
            text-align: center;
        }

        img.center {
            margin: 0 auto;
            float: none;
        }

        .show-for-small,
        .hide-for-desktop {
            display: none;
        }
       =20
       =20
        /* Typography */
        body, table.body, h1, h2, h3, h4, h5, h6, p, td {=20
            color: #222222;
            font-family: \"Helvetica\", \"Arial\", sans-serif;=20
            font-weight: normal;=20
            padding:0;=20
            margin: 0;
            text-align: left;=20
            line-height: 1.3;
        }

        h1, h2, h3, h4, h5, h6 {
            word-break: normal;
        }

        h1 {font-size: 40px;}
        h2 {font-size: 36px;}
        h3 {font-size: 32px;}
        h4 {font-size: 28px;}
        h5 {font-size: 24px;}
        h6 {font-size: 20px;}
        body, table.body, p, td {font-size: 14px;line-height:19px;}

        p.lead, p.lede, p.leed {
            font-size: 18px;
            line-height:21px;
        }

        p {=20
            margin-bottom: 10px;
        }

        small {
            font-size: 10px;
        }

        a {
            color: #f5903f;=20
            text-decoration: none;
        }

        a:hover {=20
            color: #ea6f0c !important;
        }

        a:active {=20
            color: #ea6f0c !important;
        }

        a:visited {=20
            color: #ea6f0c !important;
        }

        h1 a,=20
        h2 a,=20
        h3 a,=20
        h4 a,=20
        h5 a,=20
        h6 a {
            color: #2ba6cb;
        }

        h1 a:active,=20
        h2 a:active, =20
        h3 a:active,=20
        h4 a:active,=20
        h5 a:active,=20
        h6 a:active {=20
            color: #2ba6cb !important;=20
        }=20

        h1 a:visited,=20
        h2 a:visited, =20
        h3 a:visited,=20
        h4 a:visited,=20
        h5 a:visited,=20
        h6 a:visited {=20
            color: #2ba6cb !important;=20
        }=20
       =20
       =20
        /* Panels */
        .panel {
            background: #6899ac;
            border: 1px solid #6899ac;
            padding: 10px !important;
        }

        .sub-grid table {
            width: 100%;
        }

        .sub-grid td.sub-columns {
            padding-bottom: 0;
        }

        /* Buttons */

        table.button,
        table.tiny-button,
        table.small-button,
        table.medium-button,
        table.large-button {
            width: 100%;
            overflow: hidden;
        }

        table.button td,
        table.tiny-button td,
        table.small-button td,
        table.medium-button td,
        table.large-button td {
            display: block;
            width: auto !important;
            text-align: center;
            background: #95bf5a;
            border: 1px solid #95bf5a;
            color: #ffffff;
            padding: 18px 0;
            font-size: 20px;
        }

        table.tiny-button td {
            padding: 5px 0 4px;
        }

        table.small-button td {
            padding: 8px 0 7px;
        }

        table.medium-button td {
            padding: 12px 0 10px;
        }

        table.large-button td {
            padding: 21px 0 18px;
        }

        table.button td a,
        table.tiny-button td a,
        table.small-button td a,
        table.medium-button td a,
        table.large-button td a {
            font-weight: bold;
            text-decoration: none;
            font-family: Helvetica, Arial, sans-serif;
            color: #ffffff;
            font-size: 16px;
        }

        table.tiny-button td a {
            font-size: 12px;
            font-weight: normal;
        }

        table.small-button td a {
            font-size: 16px;
        }

        table.medium-button td a {
            font-size: 20px;
        }

        table.large-button td a {
            font-size: 24px;
        }

        table.button:hover td,
        table.button:visited td,
        table.button:active td {
            background: #709044 !important;
        }

        table.button:hover td a,
        table.button:visited td a,
        table.button:active td a {
            color: #fff !important;
        }

        table.button:hover td,
        table.tiny-button:hover td,
        table.small-button:hover td,
        table.medium-button:hover td,
        table.large-button:hover td {
            background: #709044 !important;
        }

        table.button:hover td a,
        table.button:active td a,
        table.button td a:visited,
        table.tiny-button:hover td a,
        table.tiny-button:active td a,
        table.tiny-button td a:visited,
        table.small-button:hover td a,
        table.small-button:active td a,
        table.small-button td a:visited,
        table.medium-button:hover td a,
        table.medium-button:active td a,
        table.medium-button td a:visited,
        table.large-button:hover td a,
        table.large-button:active td a,
        table.large-button td a:visited {
            color: #ffffff !important;=20
        }

        table.secondary td {
            background: #e9e9e9;
            border-color: #d0d0d0;
            color: #555;
        }

        table.secondary td a {
            color: #555;
        }

        table.secondary:hover td {
            background: #d0d0d0 !important;
            color: #555;
        }

        table.secondary:hover td a,
        table.secondary td a:visited,
        table.secondary:active td a {
            color: #555 !important;
        }

        table.success td {
            background: #5da423;
            border-color: #457a1a;
        }

        table.success:hover td {
            background: #457a1a !important;
        }

        table.alert td {
            background: #c60f13;
            border-color: #970b0e;
        }

        table.alert:hover td {
            background: #970b0e !important;
        }

        table.radius td {
            -webkit-border-radius: 3px;
            -moz-border-radius: 3px;
            border-radius: 3px;
        }

        table.round td {
            -webkit-border-radius: 500px;
            -moz-border-radius: 500px;
            border-radius: 500px;
        }
       =20
       =20
        /* Outlook First */
        body.outlook p {
            display: inline !important;
        }
       =20
       =20
        /*  Media Queries */
        @media only screen and (max-width: 600px) {

            table[class=3D\"body\"] img {
                width: auto !important;
                height: auto !important;
            }

            table[class=3D\"body\"] center {
                min-width: 0 !important;
            }

            table[class=3D\"body\"] .container {
                width: 95% !important;
            }

            table[class=3D\"body\"] .row {
                width: 100% !important;
                display: block !important;
            }

            table[class=3D\"body\"] .wrapper {
                display: block !important;
                padding-right: 0 !important;
            }

            table[class=3D\"body\"] .columns,
            table[class=3D\"body\"] .column {
                table-layout: fixed !important;
                float: none !important;
                width: 100% !important;
                padding-right: 0px !important;
                padding-left: 0px !important;
                display: block !important;
            }

            table[class=3D\"body\"] .wrapper.first .columns,
            table[class=3D\"body\"] .wrapper.first .column {
                display: table !important;
            }

            table[class=3D\"body\"] table.columns td,
            table[class=3D\"body\"] table.column td {
                width: 100% !important;
            }

            table[class=3D\"body\"] .columns td.one,
            table[class=3D\"body\"] .column td.one { width: 8.333333% =
!important; }
            table[class=3D\"body\"] .columns td.two,
            table[class=3D\"body\"] .column td.two { width: 16.666666% =
!important; }
            table[class=3D\"body\"] .columns td.three,
            table[class=3D\"body\"] .column td.three { width: 25% =
!important; }
            table[class=3D\"body\"] .columns td.four,
            table[class=3D\"body\"] .column td.four { width: 33.333333% =
!important; }
            table[class=3D\"body\"] .columns td.five,
            table[class=3D\"body\"] .column td.five { width: 41.666666% =
!important; }
            table[class=3D\"body\"] .columns td.six,
            table[class=3D\"body\"] .column td.six { width: 50% =
!important; }
            table[class=3D\"body\"] .columns td.seven,
            table[class=3D\"body\"] .column td.seven { width: 58.333333% =
!important; }
            table[class=3D\"body\"] .columns td.eight,
            table[class=3D\"body\"] .column td.eight { width: 66.666666% =
!important; }
            table[class=3D\"body\"] .columns td.nine,
            table[class=3D\"body\"] .column td.nine { width: 75% =
!important; }
            table[class=3D\"body\"] .columns td.ten,
            table[class=3D\"body\"] .column td.ten { width: 83.333333% =
!important; }
            table[class=3D\"body\"] .columns td.eleven,
            table[class=3D\"body\"] .column td.eleven { width: =
91.666666% !important; }
            table[class=3D\"body\"] .columns td.twelve,
            table[class=3D\"body\"] .column td.twelve { width: 100% =
!important; }

            table[class=3D\"body\"] td.offset-by-one,
            table[class=3D\"body\"] td.offset-by-two,
            table[class=3D\"body\"] td.offset-by-three,
            table[class=3D\"body\"] td.offset-by-four,
            table[class=3D\"body\"] td.offset-by-five,
            table[class=3D\"body\"] td.offset-by-six,
            table[class=3D\"body\"] td.offset-by-seven,
            table[class=3D\"body\"] td.offset-by-eight,
            table[class=3D\"body\"] td.offset-by-nine,
            table[class=3D\"body\"] td.offset-by-ten,
            table[class=3D\"body\"] td.offset-by-eleven {
                padding-left: 0 !important;
            }

            table[class=3D\"body\"] table.columns td.expander {
                width: 1px !important;
            }

            table[class=3D\"body\"] .right-text-pad,
            table[class=3D\"body\"] .text-pad-right {
                padding-left: 10px !important;
            }

            table[class=3D\"body\"] .left-text-pad,
            table[class=3D\"body\"] .text-pad-left {
                padding-right: 10px !important;
            }

            table[class=3D\"body\"] .hide-for-small,
            table[class=3D\"body\"] .show-for-desktop {
                display: none !important;
            }

            table[class=3D\"body\"] .show-for-small,
            table[class=3D\"body\"] .hide-for-desktop {
                display: inherit !important;
            }
        }

    </style>
    <style>
        table.facebook td {
            background: #3b5998;
            border-color: #2d4473;
        }

        table.facebook:hover td {
            background: #2d4473 !important;
        }

        table.twitter td {
            background: #00acee;
            border-color: #0087bb;
        }

        table.twitter:hover td {
            background: #0087bb !important;
        }

        table.google-plus td {
            background-color: #DB4A39;
            border-color: #CC0000;
        }

        table.google-plus:hover td {
            background: #CC0000 !important;
        }

        .template-label {
            color: #ffffff;
            font-weight: bold;
            font-size: 11px;
        }

        .callout .panel {
            background: rgba(245,144,63,.8);
            border-color: #ea6f0c;
            color: white !important;
        }

        .callout .panel p {color: white;}

        .header {
            background: #999999;
        }

        .footer .wrapper {
            background: #ebebeb;
        }

        .footer h5 {
            padding-bottom: 10px;
        }

        table.columns .text-pad {
            padding-left: 10px;
            padding-right: 10px;
        }

        table.columns .left-text-pad {
            padding-left: 10px;
        }

        table.columns .right-text-pad {
            padding-right: 10px;
        }

        @media only screen and (max-width: 600px) {

            table[class=3D\"body\"] .right-text-pad {
                padding-left: 10px !important;
            }

            table[class=3D\"body\"] .left-text-pad {
                padding-right: 10px !important;
            }
        }

    </style>
</head>
<body>
    <!-- START: Content Wrapper -->
    <table class=3D\"body\">
        <tr>
            <td class=3D\"center\" align=3D\"center\" valign=3D\"top\">
                <center>
                    <!-- START: Header -->
                    <table class=3D\"row header\" =
style=3D\"background-color:#3a2540\">
                        <tr>
                            <td class=3D\"center\" align=3D\"center\">
                                <center>
                                    <table class=3D\"container\">
                                        <tr>
                                            <td class=3D\"wrapper =
last\">
                                                <table class=3D\"twelve =
columns\" >
                                                    <tr>
                                                        <td =
class=3D\"six sub-columns\">
                                                            <img =
src=3D\"https://parkingpermit.sunderland.ac.uk/template/uos/img/UNI-logov=
2.svg\" style=3D\"width:70%;\" />
                                                        </td>
                                                        <td =
class=3D\"six sub-columns last\" align=3D\"right\" =
style=3D\"text-align:right; vertical-align:middle;\">
                                                            <span =
class=3D\"template-label\">Parking Permit Application</span>
                                                        </td>
                                                        <td =
class=3D\"expander\"></td>
                                                    </tr>
                                                </table>
                                            </td>
                                        </tr>
                                    </table>
                                </center>
                            </td>
                        </tr>
                    </table>
                    <!-- END: Header -->
                    <br />
                    <table class=3D\"container\">
                        <tr>
                            <td>
                                <!-- START: Introduction -->
                                <table class=3D\"row\">
                                    <tr>
                                        <td class=3D\"wrapper last\">
                                            <table class=3D\"twelve =
columns\">
                                                <tr>
                                                    <td>
                                                        <h1>Dear =
{$applicantTitle} {$applicantSurname}</h1>
                                                        <h4>Thank you =
for submitting your application for a parking permit.</h4>
                                                        <br />
                                                        <p =
class=3D\"lead\"><strong>Your application will now be processed and an =
approval notification sent in due course. You can use the =
temporary permit below whilst parking in the University car parks until=
 the date displayed below. A pay and display ticket must be displayed w=
ith the temporary permit where relevant.</p>
                                                    </td>
                                                    <td =
class=3D\"expander\"></td>
                                                </tr>
                                            </table>
                                        </td>
                                    </tr>
                                </table>
                                <!-- END: Introduction -->

                                <!-- START: Details -->
                                <table class=3D\"row\">
                                    <tr>
                                        <td class=3D\"wrapper last\">
                                            <table class=3D\"twelve =
columns\">
                                                <tr>
                                                    =
<td colspan=3D\"2\">PLEASE DISPLAY THIS PORTION OF THE EMAIL ON YOUR =
DASHBOARD AS IT IS YOUR TEMPORARY PERMIT. THIS PERMIT IS =
NON-TRANSFERABLE.</td>
                                                </tr>
                                                <tr>
                                                    <td>Permit =
Type</td><td>{$permitType}</td>
                                                </tr>
                                                <tr>
                                                    <td>Vehicle =
1</td><td>" . strtoupper($vehicle1VRM) . "</td>
                                                </tr>";
        if ($vehicle2VRM != NULL) { $notificationEmailMessageBodyFormatHTML .= "
                                                <tr>
                                                    <td>Vehicle =
2</td><td>" . strtoupper($vehicle2VRM) . "</td>
                                                </tr>"; }
        $notificationEmailMessageBodyFormatHTML .= "
                                                <tr>
                                                    <td>Valid From=
</td><td>" . date('d/m/Y', strtotime($permitValidFrom)) . "</td>
                                                </tr>
                                                <tr>
                                                    <td>Valid To=
</td><td>" . date('d/m/Y', strtotime($permitValidTo)) . "</td>
                                                </tr>
                                                <tr>
                                                    <td =
class=3D\"expander\"></td>
                                                </tr>
                                            </table>
                                        </td>
                                    </tr>
                                </table>
                                <br />
                                <!-- END: Details -->

                                <!-- START: Footer -->
                                <table class=3D\"row footer\">
                                    <tr>
                                        <td class=3D\"wrapper\"></td>
                                        <td class=3D\"wrapper last\">
                                            <table class=3D\"twelve =
columns\">
                                                <tr>
                                                    <td class=3D\"last =
right-text-pad\">
                                                        <h6><strong>Parki=
ng Services</strong></h6>
                                                        <h6>Facilities=
</h6>
                                                        <p>Facilities =
Helpdesk | <a href=3D\"tel:+441915153366\">(0191) 515 3366</a> | <a =
href=3D\"mailto:parkingservices@sunderland.ac.uk\">parkingservices@sunder=
land.ac.uk</a></p>
                                                        <p>For other =
information please visit our  <a =
href=3D\"http://services.sunderland.ac.uk/facilities/carparking/\"><stron=
g>website</strong></a></p>
                                                    </td>
                                                    <td =
class=3D\"expander\"></td>
                                                </tr>
                                            </table>
                                        </td>
                                    </tr>
                                </table>
                                <table class=3D\"row\">
                                    <tr>
                                        <td class=3D\"wrapper last\">
                                            <table class=3D\"twelve =
columns\">
                                                <tr>
                                                    <td =
align=3D\"center\">
                                                        <center>
                                                            <p><a =
href=3D\"http://www.sunderland.ac.uk\">(c) University of =
Sunderland</a></p>
                                                        </center>
                                                    </td>
                                                    <td =
class=3D\"expander\"></td>
                                                </tr>
                                            </table>
                                        </td>
                                    </tr>
                                </table>
                                <!-- END: Footer -->
                            </td>
                        </tr>
                    </table>
                </center>
            </td>
        </tr>
    </table>
    <!-- END: Content Wrapper -->
</body>
</html>";
        
        // Create the email message body with both the plain text and HTML parts
        $notificationEmailMessageBody = "This is a multi-part message in MIME format.\r\n";
        $notificationEmailMessageBody .= "\r\n--{$notificationMultipartBoundary}\r\n";
        $notificationEmailMessageBody .= "Content-type: text/plain; charset=\"iso-8859-1\"\r\n";
        $notificationEmailMessageBody .= "Content-transfer-encoding: quoted-printable\r\n";
        $notificationEmailMessageBody .= "\r\n";
        $notificationEmailMessageBody .= "{$notificationEmailMessageBodyFormatPlain}";
        $notificationEmailMessageBody .= "\r\n\r\n--{$notificationMultipartBoundary}\r\n";
        $notificationEmailMessageBody .= "Content-type: text/html; charset=\"iso-8859-1\"\r\n";
        $notificationEmailMessageBody .= "Content-transfer-encoding: quoted-printable\r\n";
        $notificationEmailMessageBody .= "\r\n";
        $notificationEmailMessageBody .= "{$notificationEmailMessageBodyFormatHTML}";
        $notificationEmailMessageBody .= "\r\n\r\n--{$notificationMultipartBoundary}--\r\n";
        
        // Send the email
        mail("{$applicantFirstName} {$applicantSurname} <{$applicantEmailAddress}>", "Parking Permit Application Submitted",
                $notificationEmailMessageBody, $notificationEmailHeaders, "-fparkingservices@sunderland.ac.uk");
        
        
        return TRUE;
    }
    
    /**
     * Generate an email notification informing the applicant that their application has been approved.
     * 
     * @param string $applicantTitle The applicant's title.
     * @param string $applicantFirstName The applicant's first name.
     * @param string $applicantSurname The applicant's surname.
     * @param string $applicantEmailAddress The applicant's email address.
     * @param string $permitType The permit type ID.
     * @param string $permitValidFrom The date the permit is valid from in the format `YYYY-MM-DD`.
     * @param string $permitValidTo The date the permit is valid until in the format `YYYY-MM-DD`.
     * @param string $vehicle1VRM The Vehicle Registration Mark of vehicle 1.
     * @param string $vehicle2VRM The Vehicle Registration Mark of vehicle 2, if present.
     * @return boolean Returns `TRUE`.
     * @since 1.0.0
     */
    public function generateEmailApplicationApproved($applicantTitle, $applicantFirstName, $applicantSurname, $applicantEmailAddress, $permitType, $permitValidFrom, $permitValidTo, $vehicle1VRM, $vehicle2VRM = NULL) {
        // Create an unique ID to serve as the multipart boundary
        $notificationMultipartBoundary = "MULTIPART_" . md5(rand());
        
        // Create the email headers
        $notificationEmailHeaders = "From: University of Sunderland - Parking Services <parkingservices@sunderland.ac.uk>\r\n"
                ."Date: " . date("r") . "\r\n"
                ."Return-Path: <parkingservices@sunderland.ac.uk>\r\n"
                ."MIME-Version: 1.0\r\n"
                ."Content-type: multipart/alternative;\r\n"
                ."  boundary=\"{$notificationMultipartBoundary}\"\r\n"
                ."Auto-Submitted: auto-generated\r\n"
                ."Precedence: first-class\r\n"
                ."X-Priority: 3\r\n"
                ."X-MSMail-Priority: Normal\r\n"
                ."Priority: Normal\r\n"
                ."Importance: Normal\r\n"
                ."X-Mailer: UoS/CarParking/ApplicationApproved\r\n";
        
        // Create the Plain Text part
        $notificationEmailMessageBodyFormatPlain = "Dear {$applicantTitle} {$applicantSurname},\r\n";
        $notificationEmailMessageBodyFormatPlain .= "\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Your application for a parking permit has been confirmed.\r\n";
        $notificationEmailMessageBodyFormatPlain .= "\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Staff Permits:\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Staff permits will be posted to the address stated on the application\r\n";
        $notificationEmailMessageBodyFormatPlain .= "within seven working days from date of application.\r\n";
        $notificationEmailMessageBodyFormatPlain .= "\r\n\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Student Permits:\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Student Pay and Display and Blue Badge permits will be posted to the\r\n";
        $notificationEmailMessageBodyFormatPlain .= "address stated on application within seven working days.\r\n";
        $notificationEmailMessageBodyFormatPlain .= "\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Residential permits will be available to collect from the relevant Hall\r\n";
        $notificationEmailMessageBodyFormatPlain .= "reception within seven working days.\r\n";
        $notificationEmailMessageBodyFormatPlain .= "\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Should you not recieve your permit within seven working days from the\r\n";
        $notificationEmailMessageBodyFormatPlain .= "date of this email, please contact Parking Services (See contact\r\n";
        $notificationEmailMessageBodyFormatPlain .= "details below).\r\n";
        $notificationEmailMessageBodyFormatPlain .= "\r\n\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Name: {$applicantTitle} {$applicantFirstName} {$applicantSurname}\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Email: {$applicantEmailAddress}\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Permit Type: {$permitType}\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Vehicle 1: " . strtoupper($vehicle1VRM) . "\r\n";
        if ($vehicle2VRM != NULL) { $notificationEmailMessageBodyFormatPlain .= "Vehicle 2: " . strtoupper($vehicle2VRM) . "\r\n"; }
        $notificationEmailMessageBodyFormatPlain .= "Valid From: " . date('d/m/Y', strtotime($permitValidFrom)) . "\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Valid Until: " . date('d/m/Y', strtotime($permitValidTo)) . "\r\n";
        $notificationEmailMessageBodyFormatPlain .= "\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Yours faithfully,\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Parking Services,\r\n";
        $notificationEmailMessageBodyFormatPlain .= "Facilities\r\n";
        
        // Create the HTML part
        $notificationEmailMessageBodyFormatHTML = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" =
\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">
<html xmlns=3D\"http://www.w3.org/1999/xhtml\">
<head>
    <meta http-equiv=3D\"Content-Type\" content=3D\"text/html; =
charset=3Dutf-8\" />
    <meta name=3D\"viewport\" content=3D\"width=3Ddevice-width\"/>
    <style>
        /**********************************************
        * Ink v1.0.5 - Copyright 2013 ZURB Inc        *
        **********************************************/

        /* Client-specific Styles & Reset */
        #outlook a {=20
            padding:0;=20
        }=20

        body{=20
            width:100% !important;=20
            min-width: 100%;
            -webkit-text-size-adjust:100%;=20
            -ms-text-size-adjust:100%;=20
            margin:0;=20
            padding:0;
        }

        .ExternalClass {=20
            width:100%;
        }=20

        .ExternalClass,=20
        .ExternalClass p,=20
        .ExternalClass span,=20
        .ExternalClass font,=20
        .ExternalClass td,=20
        .ExternalClass div {=20
            line-height: 100%;=20
        }=20

        #backgroundTable {=20
            margin:0;=20
            padding:0;=20
            width:100% !important;=20
            line-height: 100% !important;=20
        }

        img {=20
            outline:none;=20
            text-decoration:none;=20
            -ms-interpolation-mode: bicubic;
            width: auto;
            max-width: 100%;=20
            float: left;=20
            clear: both;=20
            display: block;
        }

        center {
            width: 100%;
            min-width: 580px;
        }

        a img {=20
            border: none;
        }

        p {
            margin: 0 0 0 10px;
        }

        table {
            border-spacing: 0;
            border-collapse: collapse;
        }

        td {=20
            word-break: break-word;
            -webkit-hyphens: auto;
            -moz-hyphens: auto;
            hyphens: auto;
            border-collapse: collapse !important;=20
        }

        table, tr, td {
            padding: 0;
            vertical-align: top;
            text-align: left;
        }

        hr {
            color: #d9d9d9;=20
            background-color: #d9d9d9;=20
            height: 1px;=20
            border: none;
        }
       =20
       =20
        /* Responsive Grid */
        table.body {
            height: 100%;
            width: 100%;
        }

        table.container {
            width: 580px;
            margin: 0 auto;
            text-align: inherit;
        }

        table.row {=20
            padding: 0px;=20
            width: 100%;
            position: relative;
        }

        table.container table.row {
            display: block;
        }

        td.wrapper {
            padding: 10px 20px 0px 0px;
            position: relative;
        }

        table.columns,
        table.column {
            margin: 0 auto;
        }

        table.columns td,
        table.column td {
            padding: 0px 0px 10px;=20
        }

        table.columns td.sub-columns,
        table.column td.sub-columns,
        table.columns td.sub-column,
        table.column td.sub-column {
            padding-right: 10px;
        }

        td.sub-column, td.sub-columns {
            min-width: 0px;
        }

        table.row td.last,
        table.container td.last {
            padding-right: 0px;
        }

        table.one { width: 30px; }
        table.two { width: 80px; }
        table.three { width: 130px; }
        table.four { width: 180px; }
        table.five { width: 230px; }
        table.six { width: 280px; }
        table.seven { width: 330px; }
        table.eight { width: 380px; }
        table.nine { width: 430px; }
        table.ten { width: 480px; }
        table.eleven { width: 530px; }
        table.twelve { width: 580px; }

        table.one center { min-width: 30px; }
        table.two center { min-width: 80px; }
        table.three center { min-width: 130px; }
        table.four center { min-width: 180px; }
        table.five center { min-width: 230px; }
        table.six center { min-width: 280px; }
        table.seven center { min-width: 330px; }
        table.eight center { min-width: 380px; }
        table.nine center { min-width: 430px; }
        table.ten center { min-width: 480px; }
        table.eleven center { min-width: 530px; }
        table.twelve center { min-width: 580px; }

        table.one .panel center { min-width: 10px; }
        table.two .panel center { min-width: 60px; }
        table.three .panel center { min-width: 110px; }
        table.four .panel center { min-width: 160px; }
        table.five .panel center { min-width: 210px; }
        table.six .panel center { min-width: 260px; }
        table.seven .panel center { min-width: 310px; }
        table.eight .panel center { min-width: 360px; }
        table.nine .panel center { min-width: 410px; }
        table.ten .panel center { min-width: 460px; }
        table.eleven .panel center { min-width: 510px; }
        table.twelve .panel center { min-width: 560px; }

        .body .columns td.one,
        .body .column td.one { width: 8.333333%; }
        .body .columns td.two,
        .body .column td.two { width: 16.666666%; }
        .body .columns td.three,
        .body .column td.three { width: 25%; }
        .body .columns td.four,
        .body .column td.four { width: 33.333333%; }
        .body .columns td.five,
        .body .column td.five { width: 41.666666%; }
        .body .columns td.six,
        .body .column td.six { width: 50%; }
        .body .columns td.seven,
        .body .column td.seven { width: 58.333333%; }
        .body .columns td.eight,
        .body .column td.eight { width: 66.666666%; }
        .body .columns td.nine,
        .body .column td.nine { width: 75%; }
        .body .columns td.ten,
        .body .column td.ten { width: 83.333333%; }
        .body .columns td.eleven,
        .body .column td.eleven { width: 91.666666%; }
        .body .columns td.twelve,
        .body .column td.twelve { width: 100%; }

        td.offset-by-one { padding-left: 50px; }
        td.offset-by-two { padding-left: 100px; }
        td.offset-by-three { padding-left: 150px; }
        td.offset-by-four { padding-left: 200px; }
        td.offset-by-five { padding-left: 250px; }
        td.offset-by-six { padding-left: 300px; }
        td.offset-by-seven { padding-left: 350px; }
        td.offset-by-eight { padding-left: 400px; }
        td.offset-by-nine { padding-left: 450px; }
        td.offset-by-ten { padding-left: 500px; }
        td.offset-by-eleven { padding-left: 550px; }

        td.expander {
            visibility: hidden;
            width: 0px;
            padding: 0 !important;
        }

        table.columns .text-pad,
        table.column .text-pad {
            padding-left: 10px;
            padding-right: 10px;
        }

        table.columns .left-text-pad,
        table.columns .text-pad-left,
        table.column .left-text-pad,
        table.column .text-pad-left {
            padding-left: 10px;
        }

        table.columns .right-text-pad,
        table.columns .text-pad-right,
        table.column .right-text-pad,
        table.column .text-pad-right {
            padding-right: 10px;
        }
       =20
       =20
        /* Block Grid */
        .block-grid {
            width: 100%;
            max-width: 580px;
        }

        .block-grid td {
            display: inline-block;
            padding:10px;
        }

        .two-up td {
            width:270px;
        }

        .three-up td {
            width:173px;
        }

        .four-up td {
            width:125px;
        }

        .five-up td {
            width:96px;
        }

        .six-up td {
            width:76px;
        }

        .seven-up td {
            width:62px;
        }

        .eight-up td {
            width:52px;
        }
       =20
       =20
        /* Alignment & Visibility Classes */
        table.center, td.center {
            text-align: center;
        }

        h1.center,
        h2.center,
        h3.center,
        h4.center,
        h5.center,
        h6.center {
            text-align: center;
        }

        span.center {
            display: block;
            width: 100%;
            text-align: center;
        }

        img.center {
            margin: 0 auto;
            float: none;
        }

        .show-for-small,
        .hide-for-desktop {
            display: none;
        }
       =20
       =20
        /* Typography */
        body, table.body, h1, h2, h3, h4, h5, h6, p, td {=20
            color: #222222;
            font-family: \"Helvetica\", \"Arial\", sans-serif;=20
            font-weight: normal;=20
            padding:0;=20
            margin: 0;
            text-align: left;=20
            line-height: 1.3;
        }

        h1, h2, h3, h4, h5, h6 {
            word-break: normal;
        }

        h1 {font-size: 40px;}
        h2 {font-size: 36px;}
        h3 {font-size: 32px;}
        h4 {font-size: 28px;}
        h5 {font-size: 24px;}
        h6 {font-size: 20px;}
        body, table.body, p, td {font-size: 14px;line-height:19px;}

        p.lead, p.lede, p.leed {
            font-size: 18px;
            line-height:21px;
        }

        p {=20
            margin-bottom: 10px;
        }

        small {
            font-size: 10px;
        }

        a {
            color: #f5903f;=20
            text-decoration: none;
        }

        a:hover {=20
            color: #ea6f0c !important;
        }

        a:active {=20
            color: #ea6f0c !important;
        }

        a:visited {=20
            color: #ea6f0c !important;
        }

        h1 a,=20
        h2 a,=20
        h3 a,=20
        h4 a,=20
        h5 a,=20
        h6 a {
            color: #2ba6cb;
        }

        h1 a:active,=20
        h2 a:active, =20
        h3 a:active,=20
        h4 a:active,=20
        h5 a:active,=20
        h6 a:active {=20
            color: #2ba6cb !important;=20
        }=20

        h1 a:visited,=20
        h2 a:visited, =20
        h3 a:visited,=20
        h4 a:visited,=20
        h5 a:visited,=20
        h6 a:visited {=20
            color: #2ba6cb !important;=20
        }=20
       =20
       =20
        /* Panels */
        .panel {
            background: #6899ac;
            border: 1px solid #6899ac;
            padding: 10px !important;
        }

        .sub-grid table {
            width: 100%;
        }

        .sub-grid td.sub-columns {
            padding-bottom: 0;
        }

        /* Buttons */

        table.button,
        table.tiny-button,
        table.small-button,
        table.medium-button,
        table.large-button {
            width: 100%;
            overflow: hidden;
        }

        table.button td,
        table.tiny-button td,
        table.small-button td,
        table.medium-button td,
        table.large-button td {
            display: block;
            width: auto !important;
            text-align: center;
            background: #95bf5a;
            border: 1px solid #95bf5a;
            color: #ffffff;
            padding: 18px 0;
            font-size: 20px;
        }

        table.tiny-button td {
            padding: 5px 0 4px;
        }

        table.small-button td {
            padding: 8px 0 7px;
        }

        table.medium-button td {
            padding: 12px 0 10px;
        }

        table.large-button td {
            padding: 21px 0 18px;
        }

        table.button td a,
        table.tiny-button td a,
        table.small-button td a,
        table.medium-button td a,
        table.large-button td a {
            font-weight: bold;
            text-decoration: none;
            font-family: Helvetica, Arial, sans-serif;
            color: #ffffff;
            font-size: 16px;
        }

        table.tiny-button td a {
            font-size: 12px;
            font-weight: normal;
        }

        table.small-button td a {
            font-size: 16px;
        }

        table.medium-button td a {
            font-size: 20px;
        }

        table.large-button td a {
            font-size: 24px;
        }

        table.button:hover td,
        table.button:visited td,
        table.button:active td {
            background: #709044 !important;
        }

        table.button:hover td a,
        table.button:visited td a,
        table.button:active td a {
            color: #fff !important;
        }

        table.button:hover td,
        table.tiny-button:hover td,
        table.small-button:hover td,
        table.medium-button:hover td,
        table.large-button:hover td {
            background: #709044 !important;
        }

        table.button:hover td a,
        table.button:active td a,
        table.button td a:visited,
        table.tiny-button:hover td a,
        table.tiny-button:active td a,
        table.tiny-button td a:visited,
        table.small-button:hover td a,
        table.small-button:active td a,
        table.small-button td a:visited,
        table.medium-button:hover td a,
        table.medium-button:active td a,
        table.medium-button td a:visited,
        table.large-button:hover td a,
        table.large-button:active td a,
        table.large-button td a:visited {
            color: #ffffff !important;=20
        }

        table.secondary td {
            background: #e9e9e9;
            border-color: #d0d0d0;
            color: #555;
        }

        table.secondary td a {
            color: #555;
        }

        table.secondary:hover td {
            background: #d0d0d0 !important;
            color: #555;
        }

        table.secondary:hover td a,
        table.secondary td a:visited,
        table.secondary:active td a {
            color: #555 !important;
        }

        table.success td {
            background: #5da423;
            border-color: #457a1a;
        }

        table.success:hover td {
            background: #457a1a !important;
        }

        table.alert td {
            background: #c60f13;
            border-color: #970b0e;
        }

        table.alert:hover td {
            background: #970b0e !important;
        }

        table.radius td {
            -webkit-border-radius: 3px;
            -moz-border-radius: 3px;
            border-radius: 3px;
        }

        table.round td {
            -webkit-border-radius: 500px;
            -moz-border-radius: 500px;
            border-radius: 500px;
        }
       =20
       =20
        /* Outlook First */
        body.outlook p {
            display: inline !important;
        }
       =20
       =20
        /*  Media Queries */
        @media only screen and (max-width: 600px) {

            table[class=3D\"body\"] img {
                width: auto !important;
                height: auto !important;
            }

            table[class=3D\"body\"] center {
                min-width: 0 !important;
            }

            table[class=3D\"body\"] .container {
                width: 95% !important;
            }

            table[class=3D\"body\"] .row {
                width: 100% !important;
                display: block !important;
            }

            table[class=3D\"body\"] .wrapper {
                display: block !important;
                padding-right: 0 !important;
            }

            table[class=3D\"body\"] .columns,
            table[class=3D\"body\"] .column {
                table-layout: fixed !important;
                float: none !important;
                width: 100% !important;
                padding-right: 0px !important;
                padding-left: 0px !important;
                display: block !important;
            }

            table[class=3D\"body\"] .wrapper.first .columns,
            table[class=3D\"body\"] .wrapper.first .column {
                display: table !important;
            }

            table[class=3D\"body\"] table.columns td,
            table[class=3D\"body\"] table.column td {
                width: 100% !important;
            }

            table[class=3D\"body\"] .columns td.one,
            table[class=3D\"body\"] .column td.one { width: 8.333333% =
!important; }
            table[class=3D\"body\"] .columns td.two,
            table[class=3D\"body\"] .column td.two { width: 16.666666% =
!important; }
            table[class=3D\"body\"] .columns td.three,
            table[class=3D\"body\"] .column td.three { width: 25% =
!important; }
            table[class=3D\"body\"] .columns td.four,
            table[class=3D\"body\"] .column td.four { width: 33.333333% =
!important; }
            table[class=3D\"body\"] .columns td.five,
            table[class=3D\"body\"] .column td.five { width: 41.666666% =
!important; }
            table[class=3D\"body\"] .columns td.six,
            table[class=3D\"body\"] .column td.six { width: 50% =
!important; }
            table[class=3D\"body\"] .columns td.seven,
            table[class=3D\"body\"] .column td.seven { width: 58.333333% =
!important; }
            table[class=3D\"body\"] .columns td.eight,
            table[class=3D\"body\"] .column td.eight { width: 66.666666% =
!important; }
            table[class=3D\"body\"] .columns td.nine,
            table[class=3D\"body\"] .column td.nine { width: 75% =
!important; }
            table[class=3D\"body\"] .columns td.ten,
            table[class=3D\"body\"] .column td.ten { width: 83.333333% =
!important; }
            table[class=3D\"body\"] .columns td.eleven,
            table[class=3D\"body\"] .column td.eleven { width: =
91.666666% !important; }
            table[class=3D\"body\"] .columns td.twelve,
            table[class=3D\"body\"] .column td.twelve { width: 100% =
!important; }

            table[class=3D\"body\"] td.offset-by-one,
            table[class=3D\"body\"] td.offset-by-two,
            table[class=3D\"body\"] td.offset-by-three,
            table[class=3D\"body\"] td.offset-by-four,
            table[class=3D\"body\"] td.offset-by-five,
            table[class=3D\"body\"] td.offset-by-six,
            table[class=3D\"body\"] td.offset-by-seven,
            table[class=3D\"body\"] td.offset-by-eight,
            table[class=3D\"body\"] td.offset-by-nine,
            table[class=3D\"body\"] td.offset-by-ten,
            table[class=3D\"body\"] td.offset-by-eleven {
                padding-left: 0 !important;
            }

            table[class=3D\"body\"] table.columns td.expander {
                width: 1px !important;
            }

            table[class=3D\"body\"] .right-text-pad,
            table[class=3D\"body\"] .text-pad-right {
                padding-left: 10px !important;
            }

            table[class=3D\"body\"] .left-text-pad,
            table[class=3D\"body\"] .text-pad-left {
                padding-right: 10px !important;
            }

            table[class=3D\"body\"] .hide-for-small,
            table[class=3D\"body\"] .show-for-desktop {
                display: none !important;
            }

            table[class=3D\"body\"] .show-for-small,
            table[class=3D\"body\"] .hide-for-desktop {
                display: inherit !important;
            }
        }

    </style>
    <style>
        table.facebook td {
            background: #3b5998;
            border-color: #2d4473;
        }

        table.facebook:hover td {
            background: #2d4473 !important;
        }

        table.twitter td {
            background: #00acee;
            border-color: #0087bb;
        }

        table.twitter:hover td {
            background: #0087bb !important;
        }

        table.google-plus td {
            background-color: #DB4A39;
            border-color: #CC0000;
        }

        table.google-plus:hover td {
            background: #CC0000 !important;
        }

        .template-label {
            color: #ffffff;
            font-weight: bold;
            font-size: 11px;
        }

        .callout .panel {
            background: rgba(245,144,63,.8);
            border-color: #ea6f0c;
            color: white !important;
        }

        .callout .panel p {color: white;}

        .header {
            background: #999999;
        }

        .footer .wrapper {
            background: #ebebeb;
        }

        .footer h5 {
            padding-bottom: 10px;
        }

        table.columns .text-pad {
            padding-left: 10px;
            padding-right: 10px;
        }

        table.columns .left-text-pad {
            padding-left: 10px;
        }

        table.columns .right-text-pad {
            padding-right: 10px;
        }

        @media only screen and (max-width: 600px) {

            table[class=3D\"body\"] .right-text-pad {
                padding-left: 10px !important;
            }

            table[class=3D\"body\"] .left-text-pad {
                padding-right: 10px !important;
            }
        }

    </style>
</head>
<body>
    <!-- START: Content Wrapper -->
    <table class=3D\"body\">
        <tr>
            <td class=3D\"center\" align=3D\"center\" valign=3D\"top\">
                <center>
                    <!-- START: Header -->
                    <table class=3D\"row header\" =
style=3D\"background-color:#3a2540\">
                        <tr>
                            <td class=3D\"center\" align=3D\"center\">
                                <center>
                                    <table class=3D\"container\">
                                        <tr>
                                            <td class=3D\"wrapper =
last\">
                                                <table class=3D\"twelve =
columns\" >
                                                    <tr>
                                                        <td =
class=3D\"six sub-columns\">
                                                            <img =
src=3D\"https://parkingpermit.sunderland.ac.uk/template/uos/img/UNI-logov=
2.svg\" style=3D\"width:70%;\" />
                                                        </td>
                                                        <td =
class=3D\"six sub-columns last\" align=3D\"right\" =
style=3D\"text-align:right; vertical-align:middle;\">
                                                            <span =
class=3D\"template-label\">Parking Permit Application</span>
                                                        </td>
                                                        <td =
class=3D\"expander\"></td>
                                                    </tr>
                                                </table>
                                            </td>
                                        </tr>
                                    </table>
                                </center>
                            </td>
                        </tr>
                    </table>
                    <!-- END: Header -->
                    <br />
                    <table class=3D\"container\">
                        <tr>
                            <td>
                                <!-- START: Introduction -->
                                <table class=3D\"row\">
                                    <tr>
                                        <td class=3D\"wrapper last\">
                                            <table class=3D\"twelve =
columns\">
                                                <tr>
                                                    <td>
                                                        <h1>Dear =
{$applicantTitle} {$applicantSurname}</h1>
                                                        <h4>Your applicat=
ion for a parking permit has been confirmed.</h4>
                                                        <br />
                                                        <p class=3D\"lead=
\"><strong>Staff Permits:</strong></p>
                                                        <p class=3D\"lead=
\">Staff permits will be posted to the address stated on the application =
within seven working days from date of application.</p>
                                                        <br />
                                                        <p class=3D\"lead=
\"><strong>Student Permits:</strong></p>
                                                        <p class=3D\"lead=
\">Student Pay and Display and Blue Badge permits will be posted to the a=
ddress stated in the application within seven working days.</p>
                                                        <p class=3D\"lead=
\">Residential permits will be available to collect from the relevant Hal=
l reception within seven working days.</p>
                                                        <p class=3D\"lead=
\">Should you not recieve your permit within seven working days from the =
date of this email, please contact Parking Services (See contact details =
below).</p>
                                                    </td>
                                                    <td =
class=3D\"expander\"></td>
                                                </tr>
                                            </table>
                                        </td>
                                    </tr>
                                </table>
                                <!-- END: Introduction -->

                                <!-- START: Details -->
                                <table class=3D\"row\">
                                    <tr>
                                        <td class=3D\"wrapper last\">
                                            <table class=3D\"twelve =
columns\">
                                                <tr>
                                                    <td>Name</td><td=
>{$applicantTitle} {$applicantFirstName} {$applicantSurname}</td>
                                                </tr>
                                                <tr>
                                                    <td>Email</td>=
<td>{$applicantEmailAddress}</td>
                                                </tr>
                                                <tr>
                                                    <td>Permit Type=
</td><td>{$permitType}</td>
                                                </tr>
                                                <tr>
                                                    <td>Vehicle =
1</td><td>" . strtoupper($vehicle1VRM) . "</td>
                                                </tr>";
        if ($vehicle2VRM != NULL) { $notificationEmailMessageBodyFormatHTML .= "
                                                <tr>
                                                    <td>Vehicle =
2</td><td>" . strtoupper($vehicle2VRM) . "</td>
                                                </tr>"; }
        $notificationEmailMessageBodyFormatHTML .= "
                                                <tr>
                                                    <td>Valid From=
</td><td>" . date('d/m/Y', strtotime($permitValidFrom)) . "</td>
                                                </tr>
                                                <tr>
                                                    <td>Valid To=
</td><td>" . date('d/m/Y', strtotime($permitValidTo)) . "</td>
                                                </tr>
                                                <tr>
                                                    <td =
class=3D\"expander\"></td>
                                                </tr>
                                            </table>
                                        </td>
                                    </tr>
                                </table>
                                <br />
                                <!-- END: Details -->

                                <!-- START: Footer -->
                                <table class=3D\"row footer\">
                                    <tr>
                                        <td class=3D\"wrapper\"></td>
                                        <td class=3D\"wrapper last\">
                                            <table class=3D\"twelve =
columns\">
                                                <tr>
                                                    <td class=3D\"last =
right-text-pad\">
                                                        <h6><strong>Parki=
ng Services</strong></h6>
                                                        <h6>Facilities=
</h6>
                                                        <p>Facilities =
Helpdesk | <a href=3D\"tel:+441915153366\">(0191) 515 3366</a> | <a =
href=3D\"mailto:parkingservices@sunderland.ac.uk\">parkingservices@sunder=
land.ac.uk</a></p>
                                                        <p>For other =
information please visit our  <a =
href=3D\"http://services.sunderland.ac.uk/facilities/carparking/\"><stron=
g>website</strong></a></p>
                                                    </td>
                                                    <td =
class=3D\"expander\"></td>
                                                </tr>
                                            </table>
                                        </td>
                                    </tr>
                                </table>
                                <table class=3D\"row\">
                                    <tr>
                                        <td class=3D\"wrapper last\">
                                            <table class=3D\"twelve =
columns\">
                                                <tr>
                                                    <td =
align=3D\"center\">
                                                        <center>
                                                            <p><a =
href=3D\"http://www.sunderland.ac.uk\">(c) University of =
Sunderland</a></p>
                                                        </center>
                                                    </td>
                                                    <td =
class=3D\"expander\"></td>
                                                </tr>
                                            </table>
                                        </td>
                                    </tr>
                                </table>
                                <!-- END: Footer -->
                            </td>
                        </tr>
                    </table>
                </center>
            </td>
        </tr>
    </table>
    <!-- END: Content Wrapper -->
</body>
</html>";
        
        // Create the email message body with both the plain text and HTML parts
        $notificationEmailMessageBody = "This is a multi-part message in MIME format.\r\n";
        $notificationEmailMessageBody .= "\r\n--{$notificationMultipartBoundary}\r\n";
        $notificationEmailMessageBody .= "Content-type: text/plain; charset=\"ISO-8859-1\"\r\n";
        $notificationEmailMessageBody .= "Content-transfer-encoding: quoted-printable\r\n";
        $notificationEmailMessageBody .= "\r\n";
        $notificationEmailMessageBody .= "{$notificationEmailMessageBodyFormatPlain}";
        $notificationEmailMessageBody .= "\r\n\r\n--{$notificationMultipartBoundary}\r\n";
        $notificationEmailMessageBody .= "Content-type: text/html; charset=\"ISO-8859-1\"\r\n";
        $notificationEmailMessageBody .= "Content-transfer-encoding: quoted-printable\r\n";
        $notificationEmailMessageBody .= "\r\n";
        $notificationEmailMessageBody .= "{$notificationEmailMessageBodyFormatHTML}";
        $notificationEmailMessageBody .= "\r\n\r\n--{$notificationMultipartBoundary}--\r\n";
        
        // Send the email
        mail("{$applicantFirstName} {$applicantSurname} <{$applicantEmailAddress}>", "Parking Permit Application Approved",
                $notificationEmailMessageBody, $notificationEmailHeaders, "-fparkingservices@sunderland.ac.uk");
        
        
        return TRUE;
    }

}

?>
